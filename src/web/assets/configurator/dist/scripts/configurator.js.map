{"version":3,"file":"configurator/dist/scripts/configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/web/assets/configurator/src/scripts/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/namespace.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/Item.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/BlockTypeFieldLayout.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/BlockType.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/Settings.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/BlockTypeIconSelect.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/BlockTypeSettings.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/Group.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/GroupSettings.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/Configurator.js","webpack://craft-neo/./src/web/assets/configurator/src/scripts/main.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  $container: null,\n  _field: null,\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n    this._field = settings.field\n    this._settings = settings.settings\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns Promise\n   */\n  load () {\n    return Promise.resolve()\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns the Neo field this item belongs to\n   */\n  getField () {\n    return this._field\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  getSortOrder () {\n    return this.$container.index() + 1\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from './namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  uid: null,\n  blockId: null,\n  initUi: true\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _initialised: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._uid = settings.uid\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    if (settings.initUi) {\n      this.initUi()\n    }\n  },\n\n  initUi () {\n    if (this._initialised) {\n      return\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      elementType: 'benf\\\\neo\\\\elements\\\\Block',\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n    this._updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(() => this._updateChildBlocksUiElement())\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n    this._initialised = true\n  },\n\n  getId () {\n    return this._id\n  },\n\n  /**\n   * @since 4.0.5\n   */\n  getUid () {\n    return this._uid\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = {\n      tabs: [],\n      uid: this._uid\n    }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  },\n\n  _updateChildBlocksUiElement () {\n    const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n    const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n    const $tabUiElement = this._fld.$tabContainer.find(selector)\n    $uiLibraryElement.toggleClass(\n      'hidden',\n      $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n    )\n    if ($tabUiElement.hasClass('velocity-animating')) {\n      $tabUiElement.removeClass('hidden')\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport Item from './Item'\nimport NS from './namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null,\n  alreadyLoaded: false\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n  _loaded: false,\n  _initialisedUi: false,\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._field = settings.field\n    this._fieldLayout = settings.fieldLayout\n    this._loaded = settings.alreadyLoaded\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-bt=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateBlockType(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n\n    // Manually select the block type, instead of letting the actions button click close the menu\n    this.addListener(this.$actionsButton, 'click', (e) => {\n      e.stopPropagation()\n      this.getField().selectItem(this)\n    })\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n    const menuId = `actionmenu${Math.floor(Math.random() * 1000000)}`\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\" data-neo-bt=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"btn action-btn menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" aria-controls=\"${menuId}\" data-neo-bt=\"button.actions\"></button>\n        <div id=\"${menuId}\" class=\"menu menu--disclosure\" data-neo-bt=\"container.menu\">\n          <ul>\n            <li><button class=\"menu-item\" data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</button></li>\n            <li class=\"disabled\"><button class=\"menu-item\" data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</button></li>\n            <li><button class=\"menu-item\" data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</button></li>\n            <li><button class=\"menu-item error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</button></li>\n          </ul>\n        </div>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"blocktype:${this.getId()}\" data-neo-gs=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (`${this.getId()}`.startsWith('new')) {\n      // New block types should already be loaded\n      this._loaded = true\n    }\n\n    if (this._loaded) {\n      // Already loaded (though make sure the UI is initialised as well)\n      this._initUi()\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const settings = this.getSettings()\n    // Don't overwrite the field layout if it's already set (e.g. if pasting a block type)\n    const fieldLayout = this.getFieldLayout()?.getConfig() ?? settings.getFieldLayoutConfig()\n    const fieldLayoutId = settings.getFieldLayoutId()\n    const data = {\n      blockTypeId: this.getId(),\n      errors: settings.getErrors(),\n      fieldLayout\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n        .then(response => {\n          if (response.data.headHtml) {\n            Craft.appendHeadHtml(response.data.headHtml)\n          }\n\n          if (response.data.bodyHtml) {\n            Craft.appendBodyHtml(response.data.bodyHtml)\n          }\n\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.fieldLayoutHtml,\n            id: fieldLayoutId,\n            blockTypeId: data.blockTypeId,\n            initUi: false\n          })\n          this._settings.createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId)\n          })\n          this._loaded = true\n\n          if (this.getId()) {\n            this.getField().addItem(this)\n            this._initUi()\n          }\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  _initUi () {\n    if (!this._loaded || this._initialisedUi) {\n      return\n    }\n\n    const settingsObj = this.getSettings()\n\n    // Set up the actions menu\n    this._actionsMenu = this.$actionsButton.data('trigger') || new Garnish.DisclosureMenu(this.$actionsButton)\n    this.$actionsMenu = this._actionsMenu.$container\n    this.addListener(this.$actionsMenu.find('[data-action]'), 'click', this['@actionSelect'])\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing browser tabs\n    const refreshPasteOptions = () => this.$actionsMenu\n      .find('[data-action=\"paste\"]')\n      .parent()\n      .toggleClass('disabled', !window.localStorage.getItem('neo:copyBlockType'))\n    refreshPasteOptions()\n    this.addListener(document, `visibilitychange.blocktype${this.getId()}`, refreshPasteOptions)\n\n    this.getSettings()?.initUi()\n    this.getFieldLayout()?.initUi()\n    this._initialisedUi = true\n  },\n\n  /**\n   * @since 5.0.0\n   */\n  getConfig () {\n    const settings = this.getSettings()\n\n    return {\n      settings: {\n        childBlocks: settings.getChildBlocks(),\n        conditions: settings.getConditions(),\n        description: settings.getDescription(),\n        enabled: settings.getEnabled(),\n        iconId: settings.getIconId(),\n        ignorePermissions: settings.getIgnorePermissions(),\n        handle: settings.getHandle(),\n        minBlocks: settings.getMinBlocks(),\n        maxBlocks: settings.getMaxBlocks(),\n        minChildBlocks: settings.getMinChildBlocks(),\n        maxChildBlocks: settings.getMaxChildBlocks(),\n        minSiblingBlocks: settings.getMinSiblingBlocks(),\n        maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n        name: settings.getName(),\n        topLevel: settings.getTopLevel()\n      },\n      fieldLayout: this.getFieldLayout().getConfig()\n    }\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    }\n\n    if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const option = e.target\n\n    if (option.classList.contains('disabled')) {\n      return\n    }\n\n    this._actionsMenu?.hide()\n\n    switch (option.getAttribute('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import Craft from 'craft'\n\n/**\n * Class for managing the selected icon for a block type.\n * @since 4.0.0\n */\nexport default class BlockTypeIconSelect {\n  /**\n   * Container for the display of the set icon.\n   * @public\n   */\n  imageContainer = null\n\n  /**\n   * Image for the display of the set icon.\n   * @public\n   */\n  image = null\n\n  /**\n   * Text (filename) for the display of the set icon.\n   * @public\n   */\n  imageText = null\n\n  /**\n   * Icons that can be selected from the menu.\n   * @public\n   */\n  menuItems = []\n\n  /**\n   * The button for setting the icon.\n   * @public\n   */\n  btnSet = null\n\n  /**\n   * The button for unsetting the icon.\n   * @public\n   */\n  btnRemove = null\n\n  /**\n   * The hidden input for the element editor form.\n   * @public\n   */\n  input = null\n\n  /**\n   * The constructor.\n   * @param container - The icon field container.\n   * @public\n   */\n  constructor (container) {\n    this.imageContainer = container.querySelector('[data-icon-select-show]')\n    this.image = this.imageContainer?.querySelector('img') ?? null\n    this.imageText = this.imageContainer?.querySelector('p') ?? null\n    this.menuItems = container.querySelectorAll('[data-icon-select-item]')\n    this.btnSet = container.querySelector('[data-icon-select-set]')\n    this.btnRemove = container.querySelector('[data-icon-select-remove]')\n    this.input = container.querySelector('input[name$=\"[iconFilename]\"]')\n\n    this.btnRemove?.addEventListener('click', (_) => this.remove())\n    this.menuItems.forEach((item) => {\n      const filename = item.querySelector('span')?.textContent\n      const url = item.querySelector('img')?.getAttribute('src')\n      item.addEventListener('click', (_) => this.set({ filename, url }))\n    })\n  }\n\n  /**\n   * Sets the selected icon.\n   * @param item - An object representing the selected icon\n   * @public\n   */\n  set (item) {\n    this.image?.setAttribute('src', item.url)\n    this.input?.setAttribute('value', item.filename)\n    this.btnRemove?.classList.remove('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = item.filename\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Replace')\n    }\n  }\n\n  /**\n   * Unsets the icon.\n   * @public\n   */\n  remove () {\n    this.image?.setAttribute('src', '')\n    this.input?.setAttribute('value', '')\n    this.btnRemove?.classList.add('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = Craft.t('neo', 'None set')\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Add')\n    }\n  }\n}\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from './namespace'\nimport Settings from './Settings'\nimport BlockTypeIconSelect from './BlockTypeIconSelect'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n  $iconContainer: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._originalSettings = settings\n    this._iconSelector = null\n    this._afterCreateContainer = () => {\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n\n      if (this.$iconContainer.length > 0) {\n        this._iconSelector = new BlockTypeIconSelect(this.$iconContainer[0])\n      }\n    }\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconContainer = $neo.filter('[data-neo-bts=\"container.iconFilename\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    // Exit if UI already initialised, or there is no UI to initialise yet\n    if (this._initialised || this.$container === null) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div data-neo-btsc=\"container.${settings.getId()}\">\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input.${settings.getId()}\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle ?? this._originalSettings.handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel ?? this._originalSettings.topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    if (typeof childBlocks === 'undefined') {\n      childBlocks = this._childBlocks\n    }\n\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $existingCheckbox = this.$childBlocksContainer.find(`[data-neo-btsc=\"input.${settings.getId()}\"]`)\n      const $checkbox = $existingCheckbox.length > 0\n        ? $existingCheckbox\n        : this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n\n      if ($existingCheckbox.length === 0) {\n        this.$childBlocksContainer.append($checkbox)\n        this._refreshChildBlockType(blockType)\n      }\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlockType(blockType)\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  refreshChildBlockTypes (childBlockTypes) {\n    if (childBlockTypes) {\n      this._childBlockTypes = childBlockTypes\n    }\n\n    this._childBlockTypes.forEach((childBlockType) => this._refreshChildBlockType(childBlockType))\n  },\n\n  _refreshChildBlockType (blockType) {\n    const $sidebarContainer = blockType.getField().$sidebarContainer\n    const $sidebarItem = $sidebarContainer.find(`[data-neo-bt=\"container.${blockType.getId()}\"]`)\n    let $refreshedBlockType = this.$childBlocksContainer.children(`[data-neo-btsc=\"container.${blockType.getId()}\"]`)\n\n    if ($refreshedBlockType.length === 0) {\n      // New block type, create checkbox\n      $refreshedBlockType = this._generateChildBlocksCheckbox(blockType.getSettings())\n    }\n\n    if ($sidebarItem.length > 0) {\n      // Block type reordered\n      const position = $sidebarItem.index('.nc_sidebar_list_item:not(.type-heading)')\n      const $currentChildBlockTypeAtPos = this.$childBlocksContainer.children().eq(position)\n\n      if ($currentChildBlockTypeAtPos.length > 0) {\n        $refreshedBlockType.insertBefore($currentChildBlockTypeAtPos)\n      } else {\n        // Added to the end\n        $refreshedBlockType.appendTo(this.$childBlocksContainer)\n      }\n    } else {\n      // Block type deleted\n      $refreshedBlockType.remove()\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter(`[data-neo-btsc=\"input.${blockType.getSettings().getId()}\"]`)\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from './namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-g=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateGroup(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\" data-neo-g=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"group:${this.getId()}\" data-neo-g=\"input.sortOrder\">\n      </div>`)\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const data = {\n      groupId: this.getId()\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type-group', { data })\n        .then(response => {\n          this.getSettings().createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from './namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $container: null,\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n    this._originalSettings = settings\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setName(this._originalSettings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown ?? this._originalSettings.alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport './jquery-extensions'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from './namespace'\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: '',\n  groupSettingsHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._blockTypeGroupSettingsHtml = settings.blockTypeGroupSettingsHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypesContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'items', 'blockTypes']\n    const gNamespace = [...this._templateNs, 'items', 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlocks: btInfo.childBlocks,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        field: this,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType.getConfig()))\n      blockType.on('beforeLoad.configurator', () => {\n        this.$fieldLayoutContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n        this.$settingsContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n      })\n      blockType.on('afterLoad.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this.$settingsContainer.children('.spinner').remove()\n        const blockTypeSettings = blockType.getSettings()\n        blockTypeSettings?.refreshChildBlockTypes(this.getBlockTypes())\n        blockTypeSettings?.setChildBlocks()\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        field: this,\n        settings: gSettings\n      })\n\n      group.on('beforeLoad.configurator', () => this.$settingsContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      group.on('afterLoad.configurator', () => {\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(group)\n      })\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSortOrder() - b.getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n\n      if (btSettings?.$container) {\n        const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n        btSettings.setChildBlocks(info.childBlocks)\n      }\n    }\n\n    this.selectTab('settings')\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    if (!document.contains(item.$container[0])) {\n      this._insertAt(item.$container, index)\n    }\n\n    if (this._itemSort.$items.filter(item.$container).length === 0) {\n      this._itemSort.addItems(item.$container)\n    }\n\n    if (settings?.$container) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n\n    // Only bother updating the item order if the item wasn't just being appended\n    if (index >= 0 && index < this._items.length - 1) {\n      this._updateItemOrder()\n    }\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings?.$container) {\n          btSettings.addChildBlockType(item)\n        }\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n\n      if (settings?.$container) {\n        settings.$container.remove()\n      }\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._items = this._items.filter((oldItem) => oldItem !== item)\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId) {\n    return this._blockTypeSettingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _getNewBlockTypeGroupSettingsHtml (groupId) {\n    return this._blockTypeGroupSettingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, groupId)\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        items.push(item)\n\n        if (item instanceof BlockType) {\n          item.getSettings().refreshChildBlockTypes()\n        }\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (config) {\n    const namespace = [...this._templateNs, 'items', 'blockTypes']\n    let id\n    do {\n      id = BlockTypeSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-bt=\"container.${id}\"]`).length > 0)\n\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSortOrder() : -1\n\n    if (config === null) {\n      // Creating a new block type\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      // Cloning or pasting a copy of a block type\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n      const settingsObj = Object.assign({}, config.settings, {\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${config.settings.handle}_${Date.now()}`,\n        id,\n        sortOrder: this._items.length\n      })\n      const settings = new BlockTypeSettings({\n        ...settingsObj,\n        childBlockTypes: this.getBlockTypes(),\n        namespace: [...namespace, id]\n      })\n      const fieldLayoutConfig = config.fieldLayout\n      const data = {\n        settings: settingsObj,\n        fieldLayout: fieldLayoutConfig.tabs.length > 0 ? fieldLayoutConfig : null\n      }\n\n      Craft.queue.push(() => new Promise((resolve, reject) => {\n        Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n          .then(response => {\n            const fieldLayout = new BlockTypeFieldLayout({\n              blockTypeId: id,\n              html: response.data.fieldLayoutHtml,\n              namespace: [...namespace, id]\n            })\n            settings.createContainer({\n              html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n              js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n            })\n\n            this._initBlockType(namespace, settings, fieldLayout, selectedIndex, true)\n            resolve()\n          })\n          .catch((err) => {\n            reject(err)\n            console.error(err)\n            Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.'))\n          })\n          .finally(() => this.$blockTypesContainer.find('.type-spinner').remove())\n      }))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index, alreadyLoaded = false) {\n    const blockType = new BlockType({\n      namespace,\n      field: this,\n      settings,\n      fieldLayout,\n      alreadyLoaded\n    })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType.getConfig()))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.load()\n      .then(() => {\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(blockType.getConfig()))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu?.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch((e) => {\n        console.error(e)\n        Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.'))\n      })\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    this._createBlockTypeFrom(JSON.parse(encodedData))\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'items', 'groups']\n    let id\n    do {\n      id = GroupSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-g=\"container.${id}\"]`).length > 0)\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      html: this._getNewBlockTypeGroupSettingsHtml(id),\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      field: this,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","insertAt","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","options","buf","rnds","random","_stack","enter","segments","join","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","length","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","extend","$container","_field","_selected","init","assign","field","_settings","load","Promise","resolve","getField","getSettings","getSortOrder","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","uid","blockId","initUi","_templateNs","_initialised","_id","_uid","_blockTypeId","blockTypeId","find","removeAttr","nameInput","name","JSON","stringify","_fld","elementType","customizableTabs","customizableUi","_updateChildBlocksUiElement","_tabObserver","window","MutationObserver","observe","$tabContainer","childList","subtree","getId","getUid","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","toggleClass","hasClass","removeClass","fieldLayout","alreadyLoaded","Item","_loaded","_initialisedUi","base","settingsObj","_fieldLayout","sidebarItem","$sidebarContainer","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","addListener","e","stopPropagation","selectItem","sortOrderNamespace","sortOrderName","errors","getErrors","hasErrors","isArray","keys","menuId","Math","floor","getName","getHandle","getFieldLayout","startsWith","_initUi","getFieldLayoutConfig","fieldLayoutId","getFieldLayoutId","data","reject","then","response","headHtml","bodyHtml","BlockTypeFieldLayout","fieldLayoutHtml","createContainer","settingsHtml","js","settingsJs","addItem","catch","_actionsMenu","$actionsMenu","on","_updateTemplate","refreshPasteOptions","parent","localStorage","getItem","document","childBlocks","getChildBlocks","conditions","getConditions","description","getDescription","enabled","getEnabled","iconId","getIconId","ignorePermissions","getIgnorePermissions","handle","minBlocks","getMinBlocks","maxBlocks","getMaxBlocks","minChildBlocks","getMinChildBlocks","maxChildBlocks","getMaxChildBlocks","minSiblingBlocks","getMinSiblingBlocks","maxSiblingBlocks","getMaxSiblingBlocks","topLevel","getTopLevel","text","option","target","classList","contains","hide","getAttribute","confirm","destroy","getFocusElement","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","BlockTypeIconSelect","imageContainer","image","imageText","menuItems","btnSet","btnRemove","input","constructor","container","querySelector","querySelectorAll","addEventListener","_","forEach","item","filename","textContent","url","set","setAttribute","add","sortOrder","fieldLayoutConfig","childBlockTypes","Settings","_childBlockTypes","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","$iconContainer","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_originalSettings","_iconSelector","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","containerData","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","append","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_name","oldName","property","oldValue","newValue","_handle","oldHandle","_description","oldDescription","_iconId","oldIconId","_enabled","_setLightswitchField","_ignorePermissions","ignore","_minBlocks","_setBlocksConstraint","_maxBlocks","_minSiblingBlocks","_maxSiblingBlocks","_minChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","max","parseInt","_topLevel","lightswitchProp","toggle","$all","$options","$option","onAllChange","includes","$existingCheckbox","$checkbox","_refreshChildBlockType","allChecked","eventNs","removeChildBlockType","splice","off","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","refreshChildBlockTypes","childBlockType","$sidebarItem","$refreshedBlockType","position","$currentChildBlockTypeAtPos","insertBefore","appendTo","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","groupId","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","$sortOrderInput","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","$alwaysShowDropdownContainer","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_totalNewGroups","blockTypes","groups","blockTypeSettingsHtml","blockTypeSettingsJs","groupSettingsHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","_blockTypeGroupSettingsHtml","blockTypeGroupSettingsHtml","$mainContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","blockTypeSettings","getBlockTypes","gInfo","gSettings","GroupSettings","group","Group","sort","b","info","selectTab","_insertAt","$items","addItems","removeItem","_addFieldLayout","showConfirm","message","type","removeItems","removeListener","oldItem","getItems","getItemByElement","$element","is","getSelectedItem","focusInput","thisIsTheItem","itemIsGroup","retryAll","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","_getNewBlockTypeGroupSettingsHtml","items","selectedItem","selectedIndex","_initBlockType","$spinner","Date","now","err","console","error","displayError","finally","setItem","bt","encodedData","currentTarget","context","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}