{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/assets/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/assets/src/namespace.js","webpack://craft-neo/./src/assets/src/configurator/Item.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./src/assets/src/configurator/BlockType.js","webpack://craft-neo/./src/assets/src/configurator/Settings.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeIconSelect.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./src/assets/src/configurator/Group.js","webpack://craft-neo/./src/assets/src/configurator/GroupSettings.js","webpack://craft-neo/./src/assets/src/configurator/Configurator.js","webpack://craft-neo/./src/assets/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  $container: null,\n  _field: null,\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n    this._field = settings.field\n    this._settings = settings.settings\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns Promise\n   */\n  load () {\n    return Promise.resolve()\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns the Neo field this item belongs to\n   */\n  getField () {\n    return this._field\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  getSortOrder () {\n    return this.$container.index() + 1\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  uid: null,\n  blockId: null,\n  initUi: true\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _initialised: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._uid = settings.uid\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    if (settings.initUi) {\n      this.initUi()\n    }\n  },\n\n  initUi () {\n    if (this._initialised) {\n      return\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      elementType: 'benf\\\\neo\\\\elements\\\\Block',\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n    this._updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(() => this._updateChildBlocksUiElement())\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n    this._initialised = true\n  },\n\n  getId () {\n    return this._id\n  },\n\n  /**\n   * @since 4.0.5\n   */\n  getUid () {\n    return this._uid\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = {\n      tabs: [],\n      uid: this._uid\n    }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  },\n\n  _updateChildBlocksUiElement () {\n    const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n    const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n    const $tabUiElement = this._fld.$tabContainer.find(selector)\n    $uiLibraryElement.toggleClass(\n      'hidden',\n      $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n    )\n    if ($tabUiElement.hasClass('velocity-animating')) {\n      $tabUiElement.removeClass('hidden')\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null,\n  alreadyLoaded: false\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n  _loaded: false,\n  _initialisedUi: false,\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._field = settings.field\n    this._fieldLayout = settings.fieldLayout\n    this._loaded = settings.alreadyLoaded\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-bt=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateBlockType(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n\n    // Manually select the block type, instead of letting the actions button click close the menu\n    this.addListener(this.$actionsButton, 'click', (e) => {\n      e.stopPropagation()\n      this.getField().selectItem(this)\n    })\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n    const menuId = `actionmenu${Math.floor(Math.random() * 1000000)}`\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\" data-neo-bt=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"btn action-btn menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" aria-controls=\"${menuId}\" data-neo-bt=\"button.actions\"></button>\n        <div id=\"${menuId}\" class=\"menu menu--disclosure\" data-neo-bt=\"container.menu\">\n          <ul>\n            <li><button class=\"menu-item\" data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</button></li>\n            <li class=\"disabled\"><button class=\"menu-item\" data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</button></li>\n            <li><button class=\"menu-item\" data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</button></li>\n            <li><button class=\"menu-item error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</button></li>\n          </ul>\n        </div>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"blocktype:${this.getId()}\" data-neo-gs=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (`${this.getId()}`.startsWith('new')) {\n      // New block types should already be loaded\n      this._loaded = true\n    }\n\n    if (this._loaded) {\n      // Already loaded (though make sure the UI is initialised as well)\n      this._initUi()\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const settings = this.getSettings()\n    // Don't overwrite the field layout if it's already set (e.g. if pasting a block type)\n    const fieldLayout = this.getFieldLayout()?.getConfig() ?? settings.getFieldLayoutConfig()\n    const fieldLayoutId = settings.getFieldLayoutId()\n    const data = {\n      blockTypeId: this.getId(),\n      errors: settings.getErrors(),\n      fieldLayout\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n        .then(response => {\n          if (response.data.headHtml) {\n            Craft.appendHeadHtml(response.data.headHtml)\n          }\n\n          if (response.data.bodyHtml) {\n            Craft.appendBodyHtml(response.data.bodyHtml)\n          }\n\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.fieldLayoutHtml,\n            id: fieldLayoutId,\n            blockTypeId: data.blockTypeId,\n            initUi: false\n          })\n          this._settings.createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId)\n          })\n          this._loaded = true\n\n          if (this.getId()) {\n            this.getField().addItem(this)\n            this._initUi()\n          }\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  _initUi () {\n    if (!this._loaded || this._initialisedUi) {\n      return\n    }\n\n    const settingsObj = this.getSettings()\n\n    // Set up the actions menu\n    this._actionsMenu = this.$actionsButton.data('trigger') || new Garnish.DisclosureMenu(this.$actionsButton)\n    this.$actionsMenu = this._actionsMenu.$container\n    this.addListener(this.$actionsMenu.find('[data-action]'), 'click', this['@actionSelect'])\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing browser tabs\n    const refreshPasteOptions = () => this.$actionsMenu\n      .find('[data-action=\"paste\"]')\n      .parent()\n      .toggleClass('disabled', !window.localStorage.getItem('neo:copyBlockType'))\n    refreshPasteOptions()\n    this.addListener(document, `visibilitychange.blocktype${this.getId()}`, refreshPasteOptions)\n\n    this.getSettings()?.initUi()\n    this.getFieldLayout()?.initUi()\n    this._initialisedUi = true\n  },\n\n  /**\n   * @since 5.0.0\n   */\n  getConfig () {\n    const settings = this.getSettings()\n\n    return {\n      settings: {\n        childBlocks: settings.getChildBlocks(),\n        conditions: settings.getConditions(),\n        description: settings.getDescription(),\n        enabled: settings.getEnabled(),\n        iconId: settings.getIconId(),\n        ignorePermissions: settings.getIgnorePermissions(),\n        handle: settings.getHandle(),\n        minBlocks: settings.getMinBlocks(),\n        maxBlocks: settings.getMaxBlocks(),\n        minChildBlocks: settings.getMinChildBlocks(),\n        maxChildBlocks: settings.getMaxChildBlocks(),\n        minSiblingBlocks: settings.getMinSiblingBlocks(),\n        maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n        name: settings.getName(),\n        topLevel: settings.getTopLevel()\n      },\n      fieldLayout: this.getFieldLayout().getConfig()\n    }\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    }\n\n    if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const option = e.target\n\n    if (option.classList.contains('disabled')) {\n      return\n    }\n\n    this._actionsMenu?.hide()\n\n    switch (option.getAttribute('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import Craft from 'craft'\n\n/**\n * Class for managing the selected icon for a block type.\n * @since 4.0.0\n */\nexport default class BlockTypeIconSelect {\n  /**\n   * Container for the display of the set icon.\n   * @public\n   */\n  imageContainer = null\n\n  /**\n   * Image for the display of the set icon.\n   * @public\n   */\n  image = null\n\n  /**\n   * Text (filename) for the display of the set icon.\n   * @public\n   */\n  imageText = null\n\n  /**\n   * Icons that can be selected from the menu.\n   * @public\n   */\n  menuItems = []\n\n  /**\n   * The button for setting the icon.\n   * @public\n   */\n  btnSet = null\n\n  /**\n   * The button for unsetting the icon.\n   * @public\n   */\n  btnRemove = null\n\n  /**\n   * The hidden input for the element editor form.\n   * @public\n   */\n  input = null\n\n  /**\n   * The constructor.\n   * @param container - The icon field container.\n   * @public\n   */\n  constructor (container) {\n    this.imageContainer = container.querySelector('[data-icon-select-show]')\n    this.image = this.imageContainer?.querySelector('img') ?? null\n    this.imageText = this.imageContainer?.querySelector('p') ?? null\n    this.menuItems = container.querySelectorAll('[data-icon-select-item]')\n    this.btnSet = container.querySelector('[data-icon-select-set]')\n    this.btnRemove = container.querySelector('[data-icon-select-remove]')\n    this.input = container.querySelector('input[name$=\"[iconFilename]\"]')\n\n    this.btnRemove?.addEventListener('click', (_) => this.remove())\n    this.menuItems.forEach((item) => {\n      const filename = item.querySelector('span')?.textContent\n      const url = item.querySelector('img')?.getAttribute('src')\n      item.addEventListener('click', (_) => this.set({ filename, url }))\n    })\n  }\n\n  /**\n   * Sets the selected icon.\n   * @param item - An object representing the selected icon\n   * @public\n   */\n  set (item) {\n    this.image?.setAttribute('src', item.url)\n    this.input?.setAttribute('value', item.filename)\n    this.btnRemove?.classList.remove('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = item.filename\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Replace')\n    }\n  }\n\n  /**\n   * Unsets the icon.\n   * @public\n   */\n  remove () {\n    this.image?.setAttribute('src', '')\n    this.input?.setAttribute('value', '')\n    this.btnRemove?.classList.add('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = Craft.t('neo', 'None set')\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Add')\n    }\n  }\n}\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\nimport BlockTypeIconSelect from './BlockTypeIconSelect'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n  $iconContainer: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._originalSettings = settings\n    this._iconSelector = null\n    this._afterCreateContainer = () => {\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n\n      if (this.$iconContainer.length > 0) {\n        this._iconSelector = new BlockTypeIconSelect(this.$iconContainer[0])\n      }\n    }\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconContainer = $neo.filter('[data-neo-bts=\"container.iconFilename\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    // Exit if UI already initialised, or there is no UI to initialise yet\n    if (this._initialised || this.$container === null) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div data-neo-btsc=\"container.${settings.getId()}\">\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input.${settings.getId()}\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle ?? this._originalSettings.handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel ?? this._originalSettings.topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    if (typeof childBlocks === 'undefined') {\n      childBlocks = this._childBlocks\n    }\n\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $existingCheckbox = this.$childBlocksContainer.find(`[data-neo-btsc=\"input.${settings.getId()}\"]`)\n      const $checkbox = $existingCheckbox.length > 0\n        ? $existingCheckbox\n        : this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n\n      if ($existingCheckbox.length === 0) {\n        this.$childBlocksContainer.append($checkbox)\n        this._refreshChildBlockType(blockType)\n      }\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlockType(blockType)\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  refreshChildBlockTypes (childBlockTypes) {\n    if (childBlockTypes) {\n      this._childBlockTypes = childBlockTypes\n    }\n\n    this._childBlockTypes.forEach((childBlockType) => this._refreshChildBlockType(childBlockType))\n  },\n\n  _refreshChildBlockType (blockType) {\n    const $sidebarContainer = blockType.getField().$sidebarContainer\n    const $sidebarItem = $sidebarContainer.find(`[data-neo-bt=\"container.${blockType.getId()}\"]`)\n    let $refreshedBlockType = this.$childBlocksContainer.children(`[data-neo-btsc=\"container.${blockType.getId()}\"]`)\n\n    if ($refreshedBlockType.length === 0) {\n      // New block type, create checkbox\n      $refreshedBlockType = this._generateChildBlocksCheckbox(blockType.getSettings())\n    }\n\n    if ($sidebarItem.length > 0) {\n      // Block type reordered\n      const position = $sidebarItem.index('.nc_sidebar_list_item:not(.type-heading)')\n      const $currentChildBlockTypeAtPos = this.$childBlocksContainer.children().eq(position)\n\n      if ($currentChildBlockTypeAtPos.length > 0) {\n        $refreshedBlockType.insertBefore($currentChildBlockTypeAtPos)\n      } else {\n        // Added to the end\n        $refreshedBlockType.appendTo(this.$childBlocksContainer)\n      }\n    } else {\n      // Block type deleted\n      $refreshedBlockType.remove()\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter(`[data-neo-btsc=\"input.${blockType.getSettings().getId()}\"]`)\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-g=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateGroup(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\" data-neo-g=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"group:${this.getId()}\" data-neo-g=\"input.sortOrder\">\n      </div>`)\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const data = {\n      groupId: this.getId()\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type-group', { data })\n        .then(response => {\n          this.getSettings().createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $container: null,\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n    this._originalSettings = settings\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setName(this._originalSettings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown ?? this._originalSettings.alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: '',\n  groupSettingsHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._blockTypeGroupSettingsHtml = settings.blockTypeGroupSettingsHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypesContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'items', 'blockTypes']\n    const gNamespace = [...this._templateNs, 'items', 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlocks: btInfo.childBlocks,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        field: this,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType.getConfig()))\n      blockType.on('beforeLoad.configurator', () => {\n        this.$fieldLayoutContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n        this.$settingsContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n      })\n      blockType.on('afterLoad.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this.$settingsContainer.children('.spinner').remove()\n        const blockTypeSettings = blockType.getSettings()\n        blockTypeSettings?.refreshChildBlockTypes(this.getBlockTypes())\n        blockTypeSettings?.setChildBlocks()\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        field: this,\n        settings: gSettings\n      })\n\n      group.on('beforeLoad.configurator', () => this.$settingsContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      group.on('afterLoad.configurator', () => {\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(group)\n      })\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSortOrder() - b.getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n\n      if (btSettings?.$container) {\n        const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n        btSettings.setChildBlocks(info.childBlocks)\n      }\n    }\n\n    this.selectTab('settings')\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    if (!document.contains(item.$container[0])) {\n      this._insertAt(item.$container, index)\n    }\n\n    if (this._itemSort.$items.filter(item.$container).length === 0) {\n      this._itemSort.addItems(item.$container)\n    }\n\n    if (settings?.$container) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n\n    // Only bother updating the item order if the item wasn't just being appended\n    if (index >= 0 && index < this._items.length - 1) {\n      this._updateItemOrder()\n    }\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings?.$container) {\n          btSettings.addChildBlockType(item)\n        }\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n\n      if (settings?.$container) {\n        settings.$container.remove()\n      }\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._items = this._items.filter((oldItem) => oldItem !== item)\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId) {\n    return this._blockTypeSettingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _getNewBlockTypeGroupSettingsHtml (groupId) {\n    return this._blockTypeGroupSettingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, groupId)\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        items.push(item)\n\n        if (item instanceof BlockType) {\n          item.getSettings().refreshChildBlockTypes()\n        }\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (config) {\n    const namespace = [...this._templateNs, 'items', 'blockTypes']\n    let id\n    do {\n      id = BlockTypeSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-bt=\"container.${id}\"]`).length > 0)\n\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSortOrder() : -1\n\n    if (config === null) {\n      // Creating a new block type\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      // Cloning or pasting a copy of a block type\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n      const settingsObj = Object.assign({}, config.settings, {\n        // Set a timestamp on the handle so it doesn't clash with the old one\n        handle: `${config.settings.handle}_${Date.now()}`,\n        id,\n        sortOrder: this._items.length\n      })\n      const settings = new BlockTypeSettings({\n        ...settingsObj,\n        childBlockTypes: this.getBlockTypes(),\n        namespace: [...namespace, id]\n      })\n      const fieldLayoutConfig = config.fieldLayout\n      const data = {\n        settings: settingsObj,\n        fieldLayout: fieldLayoutConfig.tabs.length > 0 ? fieldLayoutConfig : null\n      }\n\n      Craft.queue.push(() => new Promise((resolve, reject) => {\n        Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n          .then(response => {\n            const fieldLayout = new BlockTypeFieldLayout({\n              blockTypeId: id,\n              html: response.data.fieldLayoutHtml,\n              namespace: [...namespace, id]\n            })\n            settings.createContainer({\n              html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n              js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n            })\n\n            this._initBlockType(namespace, settings, fieldLayout, selectedIndex, true)\n            resolve()\n          })\n          .catch((err) => {\n            reject(err)\n            console.error(err)\n            Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.'))\n          })\n          .finally(() => this.$blockTypesContainer.find('.type-spinner').remove())\n      }))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index, alreadyLoaded = false) {\n    const blockType = new BlockType({\n      namespace,\n      field: this,\n      settings,\n      fieldLayout,\n      alreadyLoaded\n    })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType.getConfig()))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.load()\n      .then(() => {\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(blockType.getConfig()))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu?.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch((e) => {\n        console.error(e)\n        Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.'))\n      })\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    this._createBlockTypeFrom(JSON.parse(encodedData))\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'items', 'groups']\n    let id\n    do {\n      id = GroupSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-g=\"container.${id}\"]`).length > 0)\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      html: this._getNewBlockTypeGroupSettingsHtml(id),\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      field: this,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","insertAt","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","options","buf","rnds","random","_stack","enter","segments","join","arguments","length","undefined","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","extend","$container","_field","_selected","init","assign","field","_settings","load","Promise","resolve","getField","getSettings","getSortOrder","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","uid","blockId","initUi","_templateNs","_initialised","NS","_id","_uid","_blockTypeId","blockTypeId","find","removeAttr","nameInput","name","concat","JSON","stringify","_fld","elementType","customizableTabs","customizableUi","_updateChildBlocksUiElement","_tabObserver","window","MutationObserver","observe","$tabContainer","childList","subtree","getId","getUid","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","toggleClass","hasClass","removeClass","fieldLayout","alreadyLoaded","Item","_loaded","_initialisedUi","_this$getField","base","settingsObj","_fieldLayout","sidebarItem","$sidebarContainer","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","addListener","e","stopPropagation","selectItem","sortOrderNamespace","sortOrderName","errors","getErrors","hasErrors","isArray","keys","menuId","Math","floor","getName","getHandle","getFieldLayout","_this$getFieldLayout$","_this$getFieldLayout","startsWith","_initUi","getFieldLayoutConfig","fieldLayoutId","getFieldLayoutId","data","reject","then","response","headHtml","bodyHtml","BlockTypeFieldLayout","fieldLayoutHtml","createContainer","settingsHtml","js","settingsJs","addItem","catch","_this$getSettings","_this$getFieldLayout2","_actionsMenu","$actionsMenu","on","_updateTemplate","refreshPasteOptions","parent","localStorage","getItem","document","childBlocks","getChildBlocks","conditions","getConditions","description","getDescription","enabled","getEnabled","iconId","getIconId","ignorePermissions","getIgnorePermissions","handle","minBlocks","getMinBlocks","maxBlocks","getMaxBlocks","minChildBlocks","getMinChildBlocks","maxChildBlocks","getMaxChildBlocks","minSiblingBlocks","getMinSiblingBlocks","maxSiblingBlocks","getMaxSiblingBlocks","topLevel","getTopLevel","_settings$$container","text","_this$_actionsMenu","option","target","classList","contains","hide","getAttribute","confirm","destroy","getFocusElement","_this$$foot","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","BlockTypeIconSelect","constructor","container","_this$imageContainer$","_this$imageContainer","_this$imageContainer$2","_this$imageContainer2","_this$btnRemove","_defineProperty","imageContainer","querySelector","image","imageText","menuItems","querySelectorAll","btnSet","btnRemove","input","addEventListener","_","forEach","item","_item$querySelector","_item$querySelector2","filename","textContent","url","set","_this$image","_this$input","_this$btnRemove2","setAttribute","_this$image2","_this$input2","_this$btnRemove3","add","sortOrder","fieldLayoutConfig","childBlockTypes","Settings","_childBlockTypes","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","$iconContainer","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_originalSettings","_iconSelector","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","containerData","_containerData$js","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","append","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","test","_this$_name","_name","oldName","property","oldValue","newValue","_this$_handle","_handle","oldHandle","_description","oldDescription","_iconId","oldIconId","_enabled","_setLightswitchField","_ignorePermissions","ignore","_minBlocks","_setBlocksConstraint","_maxBlocks","_minSiblingBlocks","_maxSiblingBlocks","_minChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","max","parseInt","_this$_topLevel","_topLevel","lightswitchProp","toggle","_this$_childBlocks","$all","$options","$option","onAllChange","includes","$existingCheckbox","$checkbox","_refreshChildBlockType","allChecked","eventNs","removeChildBlockType","splice","off","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","refreshChildBlockTypes","childBlockType","$sidebarItem","$refreshedBlockType","position","$currentChildBlockTypeAtPos","insertBefore","appendTo","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","_settings$getName","groupId","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","$sortOrderInput","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","$alwaysShowDropdownContainer","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_this$_alwaysShowDrop","_totalNewGroups","blockTypes","groups","blockTypeSettingsHtml","blockTypeSettingsJs","groupSettingsHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","_blockTypeGroupSettingsHtml","blockTypeGroupSettingsHtml","$mainContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","blockTypeSettings","getBlockTypes","gInfo","gSettings","GroupSettings","group","Group","sort","b","info","selectTab","_insertAt","$items","addItems","removeItem","_addFieldLayout","showConfirm","message","type","removeItems","removeListener","oldItem","getItems","getItemByElement","$element","is","getSelectedItem","focusInput","thisIsTheItem","itemIsGroup","retryAll","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","_getNewBlockTypeGroupSettingsHtml","items","selectedItem","selectedIndex","_initBlockType","$spinner","Date","now","_objectSpread","err","console","error","displayError","finally","setItem","bt","_bt$$actionsMenu","encodedData","currentTarget","context","_window","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}