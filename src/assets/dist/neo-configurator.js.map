{"version":3,"file":"neo-configurator.js","mappings":"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","sources":["webpack://craft-neo/webpack/bootstrap","webpack://craft-neo/webpack/runtime/compat get default export","webpack://craft-neo/webpack/runtime/define property getters","webpack://craft-neo/webpack/runtime/hasOwnProperty shorthand","webpack://craft-neo/external var \"jQuery\"","webpack://craft-neo/./src/assets/src/jquery-extensions.js","webpack://craft-neo/external var \"Garnish\"","webpack://craft-neo/external var \"Craft\"","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/native.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/rng.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://craft-neo/./node_modules/uuid/dist/esm-browser/v4.js","webpack://craft-neo/./src/assets/src/namespace.js","webpack://craft-neo/./src/assets/src/configurator/Item.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeFieldLayout.js","webpack://craft-neo/./src/assets/src/configurator/BlockType.js","webpack://craft-neo/./src/assets/src/configurator/Settings.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeIconSelect.js","webpack://craft-neo/./src/assets/src/configurator/BlockTypeSettings.js","webpack://craft-neo/./src/assets/src/configurator/Group.js","webpack://craft-neo/./src/assets/src/configurator/GroupSettings.js","webpack://craft-neo/./src/assets/src/configurator/Configurator.js","webpack://craft-neo/./src/assets/src/configurator.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = jQuery;","import $ from 'jquery'\n\n// @see http://stackoverflow.com/a/12903503/556609\n$.fn.insertAt = function (index, $parent) {\n  return this.each(function () {\n    if (index === 0) {\n      $parent.prepend(this)\n    } else {\n      $parent.children().eq(index - 1).after(this)\n    }\n  })\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = Garnish;","const __WEBPACK_NAMESPACE_OBJECT__ = Craft;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export default {\n\n  _stack: [[]],\n\n  enter (segments, join = true) {\n    if (typeof segments === 'string') {\n      segments = this.fromFieldName(segments)\n    }\n\n    if (join) {\n      const joined = this.getNamespace()\n      joined.push(...segments)\n\n      segments = joined\n    }\n\n    this._stack.push(segments)\n  },\n\n  enterByFieldName (fieldName, join = true) {\n    this.enter(this.fromFieldName(fieldName), join)\n  },\n\n  leave () {\n    return this._stack.length > 1\n      ? this._stack.pop()\n      : this.getNamespace()\n  },\n\n  getNamespace () {\n    return Array.from(this._stack[this._stack.length - 1])\n  },\n\n  parse (value) {\n    if (typeof value === 'string') {\n      if (value.indexOf('[') > -1) {\n        return this.fromFieldName(value)\n      }\n\n      if (value.indexOf('-') > -1) {\n        return value.split('-')\n      }\n\n      if (value.indexOf('.') > -1) {\n        return value.split('.')\n      }\n\n      return value\n    }\n\n    return Array.from(value)\n  },\n\n  value (value, separator = '-') {\n    const segments = this.getNamespace()\n    segments.push(value)\n\n    return segments.join(separator)\n  },\n\n  fieldName (fieldName = '') {\n    const prefix = this.toFieldName()\n\n    if (prefix) {\n      return prefix + fieldName.replace(/([^'\"[\\]]+)([^'\"]*)/, '[$1]$2')\n    }\n\n    return fieldName\n  },\n\n  toString (separator = '-') {\n    return this.getNamespace().join(separator)\n  },\n\n  toFieldName () {\n    const segments = this.getNamespace()\n\n    switch (segments.length) {\n      case 0: return ''\n      case 1: return segments[0]\n    }\n\n    return segments[0] + '[' + segments.slice(1).join('][') + ']'\n  },\n\n  fromFieldName (fieldName) {\n    return fieldName.match(/[^[\\]\\s]+/g) || []\n  }\n}\n","import Garnish from 'garnish'\n\nconst _defaults = {\n  settings: null\n}\n\nexport default Garnish.Base.extend({\n\n  $container: null,\n  _field: null,\n  _selected: false,\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n    this._field = settings.field\n    this._settings = settings.settings\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns Promise\n   */\n  load () {\n    return Promise.resolve()\n  },\n\n  /**\n   * @since 3.8.0\n   * @returns the Neo field this item belongs to\n   */\n  getField () {\n    return this._field\n  },\n\n  getSettings () {\n    return this._settings\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  getSortOrder () {\n    return this.$container.index() + 1\n  },\n\n  select () {\n    this.toggleSelect(true)\n  },\n\n  deselect () {\n    this.toggleSelect(false)\n  },\n\n  toggleSelect: function (select) {\n    this._selected = (typeof select === 'boolean' ? select : !this._selected)\n\n    this.trigger('toggleSelect', {\n      selected: this._selected\n    })\n  },\n\n  isSelected () {\n    return this._selected\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: [],\n  html: '',\n  layout: null,\n  id: -1,\n  uid: null,\n  blockId: null,\n  blockName: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id | 0\n    this._uid = settings.uid\n    this._blockTypeId = settings.blockTypeId\n\n    this.$container = $(settings.html).find('.layoutdesigner')\n    this.$container.removeAttr('id')\n\n    const nameInput = this.$container.find('input[name=\"fieldLayout\"]')\n\n    if (nameInput.length > 0) {\n      nameInput[0].name = `neoBlockType${this._blockTypeId}[fieldLayout]`\n\n      if (settings.layout) {\n        nameInput[0].value = JSON.stringify(settings.layout)\n      }\n    }\n\n    NS.enter(this._templateNs)\n\n    this._fld = new Craft.FieldLayoutDesigner(this.$container, {\n      elementType: 'benf\\\\neo\\\\elements\\\\Block',\n      customizableTabs: true,\n      customizableUi: true\n    })\n\n    NS.leave()\n\n    const updateChildBlocksUiElement = () => {\n      const selector = '[data-type=benf-neo-fieldlayoutelements-ChildBlocksUiElement]'\n      const $uiLibraryElement = this._fld.$uiLibraryElements.filter(selector)\n      const $tabUiElement = this._fld.$tabContainer.find(selector)\n      $uiLibraryElement.toggleClass(\n        'hidden',\n        $tabUiElement.length > 0 || $('body.dragging .draghelper' + selector).length > 0\n      )\n      if ($tabUiElement.hasClass('velocity-animating')) {\n        $tabUiElement.removeClass('hidden')\n      }\n    }\n\n    updateChildBlocksUiElement()\n    this._tabObserver = new window.MutationObserver(updateChildBlocksUiElement)\n    this._tabObserver.observe(this._fld.$tabContainer[0], { childList: true, subtree: true })\n  },\n\n  getId () {\n    return this._id\n  },\n\n  /**\n   * @since 4.0.5\n   */\n  getUid () {\n    return this._uid\n  },\n\n  getBlockTypeId () {\n    return this._blockTypeId\n  },\n\n  getConfig () {\n    const newConfig = {\n      tabs: [],\n      uid: this._uid\n    }\n\n    for (const tab of this._fld.config.tabs) {\n      const newElements = []\n\n      for (const element of tab.elements) {\n        const newElement = {}\n\n        for (const key in element) {\n          newElement[key] = key === 'required' && !element[key] ? '' : element[key]\n        }\n\n        newElements.push(newElement)\n      }\n\n      newConfig.tabs.push({\n        elements: newElements,\n        name: tab.name.slice()\n      })\n    }\n\n    return newConfig\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\n\nconst _defaults = {\n  namespace: [],\n  fieldLayout: null\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n  _loaded: false,\n\n  init (settings = {}) {\n    this.base(settings)\n\n    const settingsObj = this.getSettings()\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._field = settings.field\n    this._fieldLayout = settings.fieldLayout\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-bt=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateBlockType(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-bt]')\n    this.$nameText = $neo.filter('[data-neo-bt=\"text.name\"]')\n    this.$handleText = $neo.filter('[data-neo-bt=\"text.handle\"]')\n    this.$moveButton = $neo.filter('[data-neo-bt=\"button.move\"]')\n    this.$actionsButton = $neo.filter('[data-neo-bt=\"button.actions\"]')\n\n    // If new block type, set settings / field layout designer as already loaded\n    if (/^new([0-9]+)$/.test(String(this.getId()))) {\n      this._loaded = true\n    }\n\n    // Set up the actions menu\n    this.$actionsButton.menubtn()\n    this._actionsMenu = this.$actionsButton.data('menubtn')\n    this._actionsMenu.on('optionSelect', e => this['@actionSelect'](e))\n    this.$actionsMenu = this._actionsMenu.menu.$container\n\n    // Stop the actions button click from selecting the block type and closing the menu\n    this.addListener(this.$actionsButton, 'click', e => e.stopPropagation())\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n\n      this._updateTemplate()\n    }\n\n    this.deselect()\n  },\n\n  _generateBlockType (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n    const errors = settings.getErrors()\n    const hasErrors = (Array.isArray(errors) ? errors : Object.keys(errors)).length > 0\n\n    return $(`\n      <div class=\"nc_sidebar_list_item${hasErrors ? ' has-errors' : ''}\" data-neo-bt=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-bt=\"text.name\">${settings.getName()}</div>\n        <div class=\"smalltext light code\" data-neo-bt=\"text.handle\">${settings.getHandle()}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-bt=\"button.move\"></a>\n        <button class=\"settings icon menubtn\" title=\"${Craft.t('neo', 'Actions')}\" role=\"button\" type=\"button\" data-neo-bt=\"button.actions\"></button>\n        <div class=\"menu\" data-neo-bt=\"container.menu\">\n          <ul class=\"padded\">\n            <li><a data-icon=\"field\" data-action=\"copy\">${Craft.t('neo', 'Copy')}</a></li>\n            <li class=\"disabled\"><a data-icon=\"brush\" data-action=\"paste\">${Craft.t('neo', 'Paste')}</a></li>\n            <li><a data-icon=\"share\" data-action=\"clone\">${Craft.t('neo', 'Clone')}</a></li>\n            <li><a class=\"error\" data-icon=\"remove\" data-action=\"delete\">${Craft.t('neo', 'Delete')}</a></li>\n          </ul>\n        </div>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"blocktype:${this.getId()}\" data-neo-gs=\"input.sortOrder\">\n      </div>`)\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  getFieldLayout () {\n    return this._fieldLayout\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const settings = this.getSettings()\n    // Don't overwrite the field layout if it's already set (e.g. if pasting a block type)\n    const layout = this.getFieldLayout()?.getConfig() ?? settings.getFieldLayoutConfig()\n    const layoutId = settings.getFieldLayoutId()\n    const data = {\n      blockTypeId: this.getId(),\n      errors: settings.getErrors(),\n      layout\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n        .then(response => {\n          if (response.data.headHtml) {\n            Craft.appendHeadHtml(response.data.headHtml)\n          }\n\n          if (response.data.bodyHtml) {\n            Craft.appendBodyHtml(response.data.bodyHtml)\n          }\n\n          this._fieldLayout = new BlockTypeFieldLayout({\n            namespace: [...this._templateNs, this._id],\n            html: response.data.layoutHtml,\n            id: layoutId,\n            blockTypeId: data.blockTypeId\n          })\n          this._settings.createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, data.blockTypeId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const fieldLayout = this.getFieldLayout()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (fieldLayout) {\n      fieldLayout.$container.toggleClass('hidden', !selected)\n    } else if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n      this.$handleText.text(settings.getHandle())\n      this.$container.toggleClass('is-child', !settings.getTopLevel())\n    }\n  },\n\n  '@actionSelect' (e) {\n    const $option = $(e.option)\n\n    if ($option.hasClass('disabled')) {\n      return\n    }\n\n    this._actionsMenu?.hideMenu()\n\n    switch ($option.attr('data-action')) {\n      case 'copy':\n        this.trigger('copy')\n        break\n      case 'paste':\n        this.trigger('paste')\n        break\n      case 'clone':\n        this.trigger('clone')\n        break\n      case 'delete':\n        if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n          this.getSettings().destroy()\n        }\n    }\n  }\n})\n","import $ from 'jquery'\nimport Garnish from 'garnish'\n\nexport default Garnish.Base.extend({\n\n  $container: new $(),\n\n  getFocusElement () {\n    return new $()\n  },\n\n  destroy () {\n    this.$foot?.remove()\n    this.trigger('destroy')\n  },\n\n  _refreshSetting ($container, showSetting, animate) {\n    animate = !Garnish.prefersReducedMotion() && (typeof animate === 'boolean' ? animate : true)\n\n    if (animate) {\n      if (showSetting) {\n        if ($container.hasClass('hidden')) {\n          $container\n            .removeClass('hidden')\n            .css({\n              opacity: 0,\n              marginBottom: -($container.outerHeight())\n            })\n            .velocity({\n              opacity: 1,\n              marginBottom: 24\n            }, 'fast')\n        }\n      } else if (!$container.hasClass('hidden')) {\n        $container\n          .css({\n            opacity: 1,\n            marginBottom: 24\n          })\n          .velocity({\n            opacity: 0,\n            marginBottom: -($container.outerHeight())\n          }, 'fast', () => {\n            $container.addClass('hidden')\n          })\n      }\n    } else {\n      $container\n        .toggleClass('hidden', !showSetting)\n        .css('margin-bottom', showSetting ? 24 : '')\n    }\n  }\n})\n","import Craft from 'craft'\n\n/**\n * Class for managing the selected icon for a block type.\n * @since 4.0.0\n */\nexport default class BlockTypeIconSelect {\n  /**\n   * Container for the display of the set icon.\n   * @public\n   */\n  imageContainer = null\n\n  /**\n   * Image for the display of the set icon.\n   * @public\n   */\n  image = null\n\n  /**\n   * Text (filename) for the display of the set icon.\n   * @public\n   */\n  imageText = null\n\n  /**\n   * Icons that can be selected from the menu.\n   * @public\n   */\n  menuItems = []\n\n  /**\n   * The button for setting the icon.\n   * @public\n   */\n  btnSet = null\n\n  /**\n   * The button for unsetting the icon.\n   * @public\n   */\n  btnRemove = null\n\n  /**\n   * The hidden input for the element editor form.\n   * @public\n   */\n  input = null\n\n  /**\n   * The constructor.\n   * @param container - The icon field container.\n   * @public\n   */\n  constructor (container) {\n    this.imageContainer = container.querySelector('[data-icon-select-show]')\n    this.image = this.imageContainer?.querySelector('img') ?? null\n    this.imageText = this.imageContainer?.querySelector('p') ?? null\n    this.menuItems = container.querySelectorAll('[data-icon-select-item]')\n    this.btnSet = container.querySelector('[data-icon-select-set]')\n    this.btnRemove = container.querySelector('[data-icon-select-remove]')\n    this.input = container.querySelector('input[name$=\"[iconFilename]\"]')\n\n    this.btnRemove?.addEventListener('click', (_) => this.remove())\n    this.menuItems.forEach((item) => {\n      const filename = item.querySelector('span')?.textContent\n      const url = item.querySelector('img')?.getAttribute('src')\n      item.addEventListener('click', (_) => this.set({ filename, url }))\n    })\n  }\n\n  /**\n   * Sets the selected icon.\n   * @param item - An object representing the selected icon\n   * @public\n   */\n  set (item) {\n    this.image?.setAttribute('src', item.url)\n    this.input?.setAttribute('value', item.filename)\n    this.btnRemove?.classList.remove('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = item.filename\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Replace')\n    }\n  }\n\n  /**\n   * Unsets the icon.\n   * @public\n   */\n  remove () {\n    this.image?.setAttribute('src', '')\n    this.input?.setAttribute('value', '')\n    this.btnRemove?.classList.add('hidden')\n\n    if (this.imageText !== null) {\n      this.imageText.textContent = Craft.t('neo', 'None set')\n    }\n\n    if (this.btnSet !== null) {\n      this.btnSet.textContent = Craft.t('neo', 'Add')\n    }\n  }\n}\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Garnish from 'garnish'\nimport NS from '../namespace'\nimport Settings from './Settings'\nimport BlockTypeIconSelect from './BlockTypeIconSelect'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  fieldLayoutId: null,\n  fieldLayoutConfig: null,\n  name: '',\n  handle: '',\n  description: '',\n  enabled: true,\n  ignorePermissions: true,\n  minBlocks: 0,\n  maxBlocks: 0,\n  minSiblingBlocks: 0,\n  maxSiblingBlocks: 0,\n  minChildBlocks: 0,\n  maxChildBlocks: 0,\n  topLevel: true,\n  childBlocks: null,\n  childBlockTypes: [],\n  html: null,\n  js: null,\n  errors: {}\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n  _childBlockTypes: [],\n  _initialised: false,\n\n  $container: null,\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $descriptionInput: new $(),\n  $minBlocksInput: new $(),\n  $maxBlocksInput: new $(),\n  $minSiblingBlocksInput: new $(),\n  $maxSiblingBlocksInput: new $(),\n  $minChildBlocksInput: new $(),\n  $maxChildBlocksInput: new $(),\n  $iconContainer: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._childBlockTypes = []\n    this._childBlocks = settings.childBlocks\n    this._id = settings.id\n    this._fieldLayoutId = settings.fieldLayoutId\n    this._fieldLayoutConfig = settings.fieldLayoutConfig\n    this._errors = settings.errors\n    this._settingsChildBlockTypes = settings.childBlockTypes\n    this._originalSettings = settings\n    this._iconSelector = null\n    this._afterCreateContainer = () => {\n      this.setName(settings.name)\n      this.setHandle(settings.handle)\n      this.setDescription(settings.description)\n      this._setIconId(settings.iconId)\n      this.setEnabled(settings.enabled)\n      this.setIgnorePermissions(settings.ignorePermissions)\n      this.setMinBlocks(settings.minBlocks)\n      this.setMaxBlocks(settings.maxBlocks)\n      this.setMinSiblingBlocks(settings.minSiblingBlocks)\n      this.setMaxSiblingBlocks(settings.maxSiblingBlocks)\n      this.setMinChildBlocks(settings.minChildBlocks)\n      this.setMaxChildBlocks(settings.maxChildBlocks)\n      this.setTopLevel(settings.topLevel)\n\n      if (this.$iconContainer.length > 0) {\n        this._iconSelector = new BlockTypeIconSelect(this.$iconContainer[0])\n      }\n    }\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-bts]')\n    this.$nameInput = $neo.filter('[data-neo-bts=\"input.name\"]')\n    this.$handleInput = $neo.filter('[data-neo-bts=\"input.handle\"]')\n    this.$descriptionInput = $neo.filter('[data-neo-bts=\"input.description\"]')\n    this.$iconContainer = $neo.filter('[data-neo-bts=\"container.iconFilename\"]')\n    this.$iconIdContainer = $neo.filter('[data-neo-bts=\"container.iconId\"]')\n    this.$enabledInput = $neo.filter('[data-neo-bts=\"input.enabled\"]')\n    this.$enabledContainer = $neo.filter('[data-neo-bts=\"container.enabled\"]')\n    this.$ignorePermissionsInput = $neo.filter('[data-neo-bts=\"input.ignorePermissions\"]')\n    this.$ignorePermissionsContainer = $neo.filter('[data-neo-bts=\"container.ignorePermissions\"]')\n    this.$minBlocksInput = $neo.filter('[data-neo-bts=\"input.minBlocks\"]')\n    this.$maxBlocksInput = $neo.filter('[data-neo-bts=\"input.maxBlocks\"]')\n    this.$minSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.minSiblingBlocks\"]')\n    this.$maxSiblingBlocksInput = $neo.filter('[data-neo-bts=\"input.maxSiblingBlocks\"]')\n    this.$minChildBlocksInput = $neo.filter('[data-neo-bts=\"input.minChildBlocks\"]')\n    this.$minChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.minChildBlocks\"]')\n    this.$maxChildBlocksInput = $neo.filter('[data-neo-bts=\"input.maxChildBlocks\"]')\n    this.$maxChildBlocksContainer = $neo.filter('[data-neo-bts=\"container.maxChildBlocks\"]')\n    this.$topLevelInput = $neo.filter('[data-neo-bts=\"input.topLevel\"]')\n    this.$topLevelContainer = $neo.filter('[data-neo-bts=\"container.topLevel\"]')\n    this.$groupChildBlockTypesInput = $neo.filter('[data-neo-bts=\"input.groupChildBlockTypes\"]')\n    this.$groupChildBlockTypesContainer = $neo.filter('[data-neo-bts=\"container.groupChildBlockTypes\"]')\n    this.$childBlocksInput = $neo.filter('[data-neo-bts=\"input.childBlocks\"]')\n    this.$childBlocksContainer = $neo.filter('[data-neo-bts=\"container.childBlocks\"]')\n    this.$deleteButton = $neo.filter('[data-neo-bts=\"button.delete\"]')\n\n    this._afterCreateContainer()\n  },\n\n  initUi () {\n    // Exit if UI already initialised, or there is no UI to initialise yet\n    if (this._initialised || this.$container === null) {\n      return\n    }\n\n    this.$foot = $(this._js)\n    Garnish.$bod.append(this.$foot)\n\n    Craft.initUiElements(this.$container)\n\n    this._childBlocksSelect = this.$childBlocksInput.data('checkboxSelect')\n    this._enabledLightswitch = this.$enabledInput.data('lightswitch')\n    this._ignorePermissionsLightswitch = this.$ignorePermissionsInput.data('lightswitch')\n    this._topLevelLightswitch = this.$topLevelInput.data('lightswitch')\n    this._groupChildBlockTypesLightswitch = this.$groupChildBlockTypesInput.data('lightswitch')\n    this._handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput)\n\n    // Ensure that an existing block type's handle will not be changed if the name is edited first.\n    if (this.getHandle() !== '') {\n      this._handleGenerator.stopListening()\n    }\n\n    for (const blockType of this._settingsChildBlockTypes) {\n      this.addChildBlockType(blockType)\n    }\n\n    this.setChildBlocks(this._childBlocks)\n\n    this.addListener(this.$nameInput, 'keyup change', () => {\n      this.setName(this.$nameInput.val())\n\n      if (this._handleGenerator.listening) {\n        // Wait for the handle to be auto-updated\n        setTimeout(() => this.setHandle(this.$handleInput.val()), 200)\n      }\n    })\n\n    this.addListener(this.$handleInput, 'keyup change textchange', () => this.setHandle(this.$handleInput.val()))\n    this.addListener(this.$descriptionInput, 'keyup change textchange', () => this.setDescription(this.$descriptionInput.val()))\n    this.addListener(this.$iconIdContainer, 'change', () => {\n      setTimeout(\n        () => {\n          const $iconIdInput = this.$iconIdInput\n          const iconId = $iconIdInput.length > 0 ? $iconIdInput.val() : null\n          this._setIconId(iconId)\n        },\n        500\n      )\n    })\n    this.addListener(this._enabledLightswitch, 'change', () => this.setEnabled(this._enabledLightswitch.on))\n    this.addListener(this._ignorePermissionsLightswitch, 'change', () => this.setIgnorePermissions(this._ignorePermissionsLightswitch.on))\n    this.addListener(this.$minBlocksInput, 'keyup change', () => this.setMinBlocks(this.$minBlocksInput.val()))\n    this.addListener(this.$maxBlocksInput, 'keyup change', () => this.setMaxBlocks(this.$maxBlocksInput.val()))\n    this.addListener(this.$minSiblingBlocksInput, 'keyup change', () => this.setMinSiblingBlocks(this.$minSiblingBlocksInput.val()))\n    this.addListener(this.$maxSiblingBlocksInput, 'keyup change', () => this.setMaxSiblingBlocks(this.$maxSiblingBlocksInput.val()))\n    this.addListener(this.$minChildBlocksInput, 'keyup change', () => this.setMinChildBlocks(this.$minChildBlocksInput.val()))\n    this.addListener(this.$maxChildBlocksInput, 'keyup change', () => this.setMaxChildBlocks(this.$maxChildBlocksInput.val()))\n    this.addListener(this.$topLevelInput, 'change', () => this.setTopLevel(this._topLevelLightswitch.on))\n    this.addListener(this.$groupChildBlockTypesInput, 'change', () => this.setTopLevel(this._groupChildBlockTypesLightswitch.on))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this block type?'))) {\n        this.destroy()\n      }\n    })\n\n    this.$childBlocksInput.on('change', 'input', () => this._refreshChildBlockSettings())\n\n    this._initialised = true\n  },\n\n  _generateChildBlocksCheckbox (settings) {\n    NS.enter(this._templateNs)\n    const id = NS.value('childBlock-' + settings.getId(), '-')\n    const name = NS.fieldName('childBlocks')\n    NS.leave()\n\n    return $(`\n      <div data-neo-btsc=\"container.${settings.getId()}\">\n        <input type=\"checkbox\" value=\"${settings.getHandle()}\" id=\"${id}\" class=\"checkbox\" name=\"${name}[]\" data-neo-btsc=\"input.${settings.getId()}\">\n        <label for=\"${id}\" data-neo-btsc=\"text.label\">${settings.getName()}</label>\n      </div>`)\n  },\n\n  get $iconIdInput () {\n    return this.$iconIdContainer.find('input[type=\"hidden\"]')\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getFieldLayoutId () {\n    return this._fieldLayoutId\n  },\n\n  getFieldLayoutConfig () {\n    return Object.assign({}, this._fieldLayoutConfig)\n  },\n\n  isNew () {\n    return /^new/.test(this.getId())\n  },\n\n  getErrors () {\n    return this._errors\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      if (this.$nameInput.val() !== this._name) {\n        this.$nameInput.val(this._name)\n      }\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getHandle () { return this._handle ?? this._originalSettings.handle },\n  setHandle (handle) {\n    if (handle !== this._handle) {\n      const oldHandle = this._handle\n      this._handle = handle\n\n      if (this.$handleInput.val() !== this._handle) {\n        this.$handleInput.val(this._handle)\n      }\n\n      this.trigger('change', {\n        property: 'handle',\n        oldValue: oldHandle,\n        newValue: this._handle\n      })\n    }\n  },\n\n  getDescription () { return this._description },\n  setDescription (description) {\n    if (description !== this._description) {\n      const oldDescription = this._description\n      this._description = description\n\n      if (this.$descriptionInput.val() !== this._description) {\n        this.$descriptionInput.val(this._description)\n      }\n\n      this.trigger('change', {\n        property: 'description',\n        oldValue: oldDescription,\n        newValue: this._description\n      })\n    }\n  },\n\n  getIconId () { return this._iconId },\n  _setIconId (iconId) {\n    if (iconId !== this._iconId) {\n      const oldIconId = this._iconId\n      this._iconId = iconId\n\n      if (this.$iconIdInput.val() !== this._iconId) {\n        // TODO\n        // This is normally where we would reset the input value, but since the icon ID setting is an asset field, we\n        // would also need to update the element HTML. This would be good to implement in the future, and then this\n        // method could be made public.\n      }\n\n      this.trigger('change', {\n        property: 'iconId',\n        oldValue: oldIconId,\n        newValue: this._iconId\n      })\n    }\n  },\n\n  getEnabled () { return this._enabled },\n  setEnabled (enabled) { this._setLightswitchField('enabled', enabled) },\n\n  getIgnorePermissions () { return this._ignorePermissions },\n  setIgnorePermissions (ignore) { this._setLightswitchField('ignorePermissions', ignore) },\n\n  getMinBlocks () { return this._minBlocks },\n  setMinBlocks (minBlocks) { this._setBlocksConstraint('minBlocks', minBlocks) },\n\n  getMaxBlocks () { return this._maxBlocks },\n  setMaxBlocks (maxBlocks) { this._setBlocksConstraint('maxBlocks', maxBlocks) },\n\n  getMinSiblingBlocks () { return this._minSiblingBlocks },\n  setMinSiblingBlocks (minSiblingBlocks) { this._setBlocksConstraint('minSiblingBlocks', minSiblingBlocks) },\n\n  getMaxSiblingBlocks () { return this._maxSiblingBlocks },\n  setMaxSiblingBlocks (maxSiblingBlocks) { this._setBlocksConstraint('maxSiblingBlocks', maxSiblingBlocks) },\n\n  getMinChildBlocks () { return this._minChildBlocks },\n  getMaxChildBlocks () { return this._maxChildBlocks },\n  setMinChildBlocks (minChildBlocks) { this._setBlocksConstraint('minChildBlocks', minChildBlocks) },\n  setMaxChildBlocks (maxChildBlocks) { this._setBlocksConstraint('maxChildBlocks', maxChildBlocks) },\n  _setBlocksConstraint (mode, value) {\n    const privateProp = `_${mode}`\n    const jqueryProp = `$${mode}Input`\n    const oldValue = this[privateProp]\n    const newValue = Math.max(0, value | 0)\n\n    if (newValue === 0) {\n      this[jqueryProp].val(null)\n    }\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[privateProp] > 0 && parseInt(this[jqueryProp].val()) !== this[privateProp]) {\n        this[jqueryProp].val(this[privateProp])\n      }\n\n      this.trigger('change', {\n        property: mode,\n        oldValue,\n        newValue: this[privateProp]\n      })\n    }\n  },\n\n  getTopLevel () { return this._topLevel ?? this._originalSettings.topLevel },\n  setTopLevel (topLevel) { this._setLightswitchField('topLevel', topLevel) },\n\n  _setLightswitchField (property, value) {\n    const privateProp = `_${property}`\n    const lightswitchProp = `${privateProp}Lightswitch`\n    const oldValue = this[privateProp]\n    const newValue = !!value\n\n    if (oldValue !== newValue) {\n      this[privateProp] = newValue\n\n      if (this[lightswitchProp] && this[lightswitchProp].on !== this[privateProp]) {\n        this[lightswitchProp].on = this[privateProp]\n        this[lightswitchProp].toggle()\n      }\n\n      this.trigger('change', {\n        property,\n        oldValue,\n        newValue\n      })\n    }\n  },\n\n  getChildBlocks () {\n    const select = this._childBlocksSelect\n    const childBlocks = []\n\n    if (typeof select === 'undefined') {\n      return this._childBlocks === true ? true : Array.from(this._childBlocks ?? [])\n    }\n\n    if (select.$all.prop('checked')) {\n      return true\n    }\n\n    select.$options.each(function (index) {\n      const $option = $(this)\n\n      if ($option.prop('checked')) {\n        childBlocks.push($option.val())\n      }\n    })\n\n    return childBlocks.length > 0 ? childBlocks : false\n  },\n\n  setChildBlocks (childBlocks) {\n    if (typeof childBlocks === 'undefined') {\n      childBlocks = this._childBlocks\n    }\n\n    const select = this._childBlocksSelect\n\n    if (childBlocks === true || childBlocks === '*') {\n      select.$all.prop('checked', true)\n      select.onAllChange()\n    } else if (Array.isArray(childBlocks)) {\n      select.$all.prop('checked', false)\n\n      for (const handle of childBlocks) {\n        select.$options.filter(`[value=\"${handle}\"]`).prop('checked', true)\n      }\n    } else {\n      select.$all.prop('checked', false)\n      select.$options.prop('checked', false)\n    }\n\n    this._refreshChildBlockSettings(false)\n  },\n\n  addChildBlockType (blockType) {\n    if (!this._childBlockTypes.includes(blockType)) {\n      const settings = blockType.getSettings()\n      const $existingCheckbox = this.$childBlocksContainer.find(`[data-neo-btsc=\"input.${settings.getId()}\"]`)\n      const $checkbox = $existingCheckbox.length > 0\n        ? $existingCheckbox\n        : this._generateChildBlocksCheckbox(settings)\n\n      this._childBlockTypes.push(blockType)\n\n      if ($existingCheckbox.length === 0) {\n        this.$childBlocksContainer.append($checkbox)\n        this._refreshChildBlockType(blockType)\n      }\n\n      const select = this._childBlocksSelect\n      const allChecked = select.$all.prop('checked')\n      select.$options = select.$options.add($checkbox.find('input'))\n      if (allChecked) select.onAllChange()\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.on('change' + eventNs, e => this['@onChildBlockTypeChange'](e, blockType, $checkbox))\n      settings.on('destroy' + eventNs, e => this.removeChildBlockType(blockType))\n    }\n  },\n\n  removeChildBlockType (blockType) {\n    const index = this._childBlockTypes.indexOf(blockType)\n    if (index >= 0) {\n      this._childBlockTypes.splice(index, 1)\n\n      const settings = blockType.getSettings()\n      const $checkbox = this.$childBlocksContainer.children().eq(index)\n\n      $checkbox.remove()\n\n      const select = this._childBlocksSelect\n      select.$options = select.$options.remove($checkbox.find('input'))\n\n      const eventNs = '.childBlock' + this.getId()\n      settings.off(eventNs)\n\n      this._refreshChildBlockType(blockType)\n    }\n  },\n\n  getConditions () {\n    NS.enter(this._templateNs)\n    const baseInputName = NS.toFieldName().replaceAll('\\\\', '\\\\\\\\')\n    NS.leave()\n    const baseConditionInputNameWithExtraSlash = `${baseInputName}[conditions]`\n    const baseConditionInputName = baseConditionInputNameWithExtraSlash.replaceAll('\\\\\\\\', '\\\\')\n    const conditionInputNames = this.$container\n      .find(`[name^=\"${baseConditionInputNameWithExtraSlash}\"]`)\n      .get()\n      .map((condition) => condition.name)\n\n    const allFormData = new window.FormData(this.$container.closest('form').get(0))\n    const conditionsData = {}\n\n    conditionInputNames.forEach((conditionInputName) => {\n      let conditionsSubData = conditionsData\n      const conditionsCurrentPath = [baseConditionInputName]\n      const conditionsDataPath = conditionInputName\n        .replace(baseConditionInputName, '')\n        .slice(1, -1)\n        .split('][')\n\n      conditionsDataPath.forEach((pathStep, i) => {\n        conditionsCurrentPath.push(`[${pathStep}]`)\n\n        if (pathStep !== '' && !(pathStep in conditionsSubData)) {\n          if (pathStep === 'values') {\n            conditionsSubData[pathStep] = []\n          } else if (i < conditionsDataPath.length - 1) {\n            conditionsSubData[pathStep] = {}\n          } else {\n            conditionsSubData[pathStep] = allFormData.get(conditionsCurrentPath.join(''))\n          }\n        } else if (pathStep === '') {\n          conditionsSubData.push(...allFormData.getAll(conditionsCurrentPath.join('')))\n        }\n\n        conditionsSubData = conditionsSubData[pathStep]\n      })\n    })\n\n    return conditionsData\n  },\n\n  /**\n   * @since 3.8.0\n   */\n  refreshChildBlockTypes (childBlockTypes) {\n    if (childBlockTypes) {\n      this._childBlockTypes = childBlockTypes\n    }\n\n    this._childBlockTypes.forEach((childBlockType) => this._refreshChildBlockType(childBlockType))\n  },\n\n  _refreshChildBlockType (blockType) {\n    const $sidebarContainer = blockType.getField().$sidebarContainer\n    const $sidebarItem = $sidebarContainer.find(`[data-neo-bt=\"container.${blockType.getId()}\"]`)\n    let $refreshedBlockType = this.$childBlocksContainer.children(`[data-neo-btsc=\"container.${blockType.getId()}\"]`)\n\n    if ($refreshedBlockType.length === 0) {\n      // New block type, create checkbox\n      $refreshedBlockType = this._generateChildBlocksCheckbox(blockType.getSettings())\n    }\n\n    if ($sidebarItem.length > 0) {\n      // Block type reordered\n      const position = $sidebarItem.index('.nc_sidebar_list_item:not(.type-heading)')\n      const $currentChildBlockTypeAtPos = this.$childBlocksContainer.children().eq(position)\n\n      if ($currentChildBlockTypeAtPos.length > 0) {\n        $refreshedBlockType.insertBefore($currentChildBlockTypeAtPos)\n      } else {\n        // Added to the end\n        $refreshedBlockType.appendTo(this.$childBlocksContainer)\n      }\n    } else {\n      // Block type deleted\n      $refreshedBlockType.remove()\n    }\n  },\n\n  _refreshChildBlockSettings (animate) {\n    const showSettings = !!this.getChildBlocks()\n    this._refreshSetting(this.$minChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$maxChildBlocksContainer, showSettings, animate)\n    this._refreshSetting(this.$groupChildBlockTypesContainer, showSettings, animate)\n  },\n\n  '@onChildBlockTypeChange' (e, blockType, $checkbox) {\n    const $neo = $checkbox.find('[data-neo-btsc]')\n    const $input = $neo.filter(`[data-neo-btsc=\"input.${blockType.getSettings().getId()}\"]`)\n    const $labelText = $neo.filter('[data-neo-btsc=\"text.label\"]')\n\n    switch (e.property) {\n      case 'name':\n        $labelText.text(e.newValue)\n        break\n\n      case 'handle':\n        $input.val(e.newValue)\n        break\n    }\n  }\n},\n{\n  _totalNewBlockTypes: 0,\n\n  getNewId () {\n    return `new${this._totalNewBlockTypes++}`\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport Item from './Item'\nimport NS from '../namespace'\n\nconst _defaults = {\n  namespace: []\n}\n\nexport default Item.extend({\n\n  _templateNs: [],\n\n  init (settings = {}) {\n    this.base(settings)\n\n    settings = Object.assign({}, _defaults, settings)\n\n    const settingsObj = this.getSettings()\n    this._templateNs = NS.parse(settings.namespace)\n    const sidebarItem = this.getField()?.$sidebarContainer.find(`[data-neo-g=\"container.${this.getId()}`)\n\n    if (sidebarItem?.length > 0) {\n      this.$container = sidebarItem\n    } else {\n      this.$container = this._generateGroup(settingsObj)\n    }\n\n    const $neo = this.$container.find('[data-neo-g]')\n    this.$nameText = $neo.filter('[data-neo-g=\"text.name\"]')\n    this.$moveButton = $neo.filter('[data-neo-g=\"button.move\"]')\n\n    if (settingsObj) {\n      settingsObj.on('change', () => this._updateTemplate())\n      settingsObj.on('destroy', () => this.trigger('destroy'))\n    }\n\n    this.deselect()\n  },\n\n  _generateGroup (settings) {\n    const sortOrderNamespace = [...this._templateNs]\n    sortOrderNamespace.pop()\n    NS.enter(sortOrderNamespace)\n    const sortOrderName = NS.fieldName('sortOrder')\n    NS.leave()\n\n    return $(`\n      <div class=\"nc_sidebar_list_item type-heading\" data-neo-g=\"container.${this.getId()}\">\n        <div class=\"label\" data-neo-g=\"text.name\">${settings.getName() ?? ''}</div>\n        <a class=\"move icon\" title=\"${Craft.t('neo', 'Reorder')}\" role=\"button\" data-neo-g=\"button.move\"></a>\n        <input type=\"hidden\" name=\"${sortOrderName}[]\" value=\"group:${this.getId()}\" data-neo-g=\"input.sortOrder\">\n      </div>`)\n  },\n\n  /**\n   * @inheritDoc\n   */\n  load () {\n    if (this._loaded) {\n      // Already loaded\n      return Promise.resolve()\n    }\n\n    this.trigger('beforeLoad')\n    const data = {\n      groupId: this.getId()\n    }\n\n    return new Promise((resolve, reject) => {\n      Craft.sendActionRequest('POST', 'neo/configurator/render-block-type-group', { data })\n        .then(response => {\n          this.getSettings().createContainer({\n            html: response.data.settingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId),\n            js: response.data.settingsJs.replace(/__NEOBLOCKTYPEGROUP_ID__/g, data.groupId)\n          })\n          this._loaded = true\n\n          this.trigger('afterLoad')\n          resolve()\n        })\n        .catch(reject)\n    })\n  },\n\n  getId () {\n    return this.getSettings().getId()\n  },\n\n  toggleSelect: function (select) {\n    this.base(select)\n\n    const settings = this.getSettings()\n    const selected = this.isSelected()\n\n    if (settings?.$container ?? false) {\n      settings.$container.toggleClass('hidden', !selected)\n    }\n\n    if (selected) {\n      this.load()\n    }\n\n    this.$container.toggleClass('is-selected', selected)\n  },\n\n  _updateTemplate () {\n    const settings = this.getSettings()\n\n    if (settings) {\n      this.$nameText.text(settings.getName())\n    }\n  }\n})\n","import $ from 'jquery'\nimport Craft from 'craft'\nimport NS from '../namespace'\nimport Settings from './Settings'\n\nconst _defaults = {\n  namespace: [],\n  id: null,\n  sortOrder: 0,\n  name: '',\n  alwaysShowDropdown: null,\n  defaultAlwaysShowGroupDropdowns: true\n}\n\nexport default Settings.extend({\n\n  _templateNs: [],\n\n  $container: null,\n  $sortOrderInput: new $(),\n  $nameInput: new $(),\n  $handleInput: new $(),\n  $maxBlocksInput: new $(),\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._id = settings.id\n    this._alwaysShowDropdown = settings.alwaysShowDropdown\n    this._defaultAlwaysShowGroupDropdowns = settings.defaultAlwaysShowGroupDropdowns\n    this._originalSettings = settings\n\n    if (typeof settings.html !== 'undefined' && settings.html !== null) {\n      this.createContainer({\n        html: settings.html,\n        js: settings.js\n      })\n    }\n  },\n\n  createContainer (containerData) {\n    // Only create it if it doesn't already exist\n    if (this.$container !== null) {\n      return\n    }\n\n    this.$container = $(containerData.html)\n    this._js = containerData.js ?? ''\n\n    const $neo = this.$container.find('[data-neo-gs]')\n    this.$nameInput = $neo.filter('[data-neo-gs=\"input.name\"]')\n    this.$deleteButton = $neo.filter('[data-neo-gs=\"button.delete\"]')\n    this.$alwaysShowDropdownContainer = $neo.filter('[data-neo-gs=\"container.alwaysShowDropdown\"]')\n\n    this.setName(this._originalSettings.name)\n\n    this.addListener(this.$nameInput, 'keyup change', () => this.setName(this.$nameInput.val()))\n    this.addListener(this.$deleteButton, 'click', () => {\n      if (window.confirm(Craft.t('neo', 'Are you sure you want to delete this group?'))) {\n        this.destroy()\n      }\n    })\n  },\n\n  getFocusInput () {\n    return this.$nameInput\n  },\n\n  getId () {\n    return this._id\n  },\n\n  getName () { return this._name ?? this._originalSettings.name },\n  setName (name) {\n    if (name !== this._name) {\n      const oldName = this._name\n      this._name = name\n\n      this.$nameInput.val(this._name)\n      this._refreshAlwaysShowDropdown()\n\n      this.trigger('change', {\n        property: 'name',\n        oldValue: oldName,\n        newValue: this._name\n      })\n    }\n  },\n\n  getAlwaysShowDropdown () { return this._alwaysShowDropdown ?? this._originalSettings.alwaysShowDropdown },\n\n  _refreshAlwaysShowDropdown (animate) {\n    this._refreshSetting(this.$alwaysShowDropdownContainer, !!this._name, animate)\n  }\n},\n{\n  _totalNewGroups: 0,\n\n  getNewId () {\n    return `new${this._totalNewGroups++}`\n  }\n})\n","import $ from 'jquery'\nimport '../jquery-extensions'\n\nimport Garnish from 'garnish'\nimport Craft from 'craft'\nimport { v4 as uuidv4 } from 'uuid'\nimport NS from '../namespace'\n\nimport BlockType from './BlockType'\nimport BlockTypeSettings from './BlockTypeSettings'\nimport BlockTypeFieldLayout from './BlockTypeFieldLayout'\nimport Group from './Group'\nimport GroupSettings from './GroupSettings'\nimport './styles/configurator.scss'\n\nconst _defaults = {\n  namespace: [],\n  blockTypes: [],\n  groups: [],\n  blockTypeSettingsHtml: '',\n  blockTypeSettingsJs: '',\n  fieldLayoutHtml: '',\n  groupSettingsHtml: ''\n}\n\nexport default Garnish.Base.extend({\n\n  _templateNs: [],\n  _items: [],\n\n  init (settings = {}) {\n    settings = Object.assign({}, _defaults, settings)\n\n    const inputIdPrefix = Craft.formatInputId(settings.namespace)\n    const $field = $(`#${inputIdPrefix}-neo-configurator`)\n    this.$container = $field.children('.field').children('.input')\n\n    this._templateNs = NS.parse(settings.namespace)\n    this._blockTypeSettingsHtml = settings.blockTypeSettingsHtml\n    this._blockTypeSettingsJs = settings.blockTypeSettingsJs\n    this._fieldLayoutHtml = settings.fieldLayoutHtml\n    this._blockTypeGroupSettingsHtml = settings.blockTypeGroupSettingsHtml\n    this._items = []\n\n    const $neo = this.$container.find('[data-neo]')\n    this.$mainContainer = $neo.filter('[data-neo=\"container.main\"]')\n    this.$sidebarContainer = $neo.filter('[data-neo=\"container.sidebar\"]')\n    this.$blockTypesContainer = $neo.filter('[data-neo=\"container.blockTypes\"]')\n    this.$settingsContainer = $neo.filter('[data-neo=\"container.settings\"]')\n    this.$fieldLayoutContainer = $neo.filter('[data-neo=\"container.fieldLayout\"]')\n    this.$blockTypeButton = $neo.filter('[data-neo=\"button.blockType\"]')\n    this.$groupButton = $neo.filter('[data-neo=\"button.group\"]')\n    this.$settingsButton = $neo.filter('[data-neo=\"button.settings\"]')\n    this.$fieldLayoutButton = $neo.filter('[data-neo=\"button.fieldLayout\"]')\n\n    this._itemSort = new Garnish.DragSort(null, {\n      container: this.$blockTypesContainer,\n      handle: '[data-neo-bt=\"button.move\"], [data-neo-g=\"button.move\"]',\n      axis: 'y',\n      onSortChange: () => this._updateItemOrder()\n    })\n\n    // Add the existing block types and groups\n    const existingItems = []\n    const btNamespace = [...this._templateNs, 'items', 'blockTypes']\n    const gNamespace = [...this._templateNs, 'items', 'groups']\n\n    for (const btInfo of settings.blockTypes) {\n      const btSettings = new BlockTypeSettings({\n        namespace: [...btNamespace, btInfo.id],\n        sortOrder: btInfo.sortOrder,\n        id: btInfo.id,\n        name: btInfo.name,\n        handle: btInfo.handle,\n        description: btInfo.description,\n        iconId: btInfo.iconId,\n        enabled: btInfo.enabled,\n        ignorePermissions: btInfo.ignorePermissions,\n        minBlocks: btInfo.minBlocks,\n        maxBlocks: btInfo.maxBlocks,\n        minSiblingBlocks: btInfo.minSiblingBlocks,\n        maxSiblingBlocks: btInfo.maxSiblingBlocks,\n        minChildBlocks: btInfo.minChildBlocks,\n        maxChildBlocks: btInfo.maxChildBlocks,\n        topLevel: btInfo.topLevel,\n        html: btInfo.settingsHtml,\n        js: btInfo.settingsJs,\n        errors: btInfo.errors,\n        fieldLayoutId: btInfo.fieldLayoutId,\n        fieldLayoutConfig: btInfo.fieldLayoutConfig,\n        childBlocks: btInfo.childBlocks,\n        childBlockTypes: existingItems.filter(item => item instanceof BlockType)\n      })\n\n      const blockType = new BlockType({\n        namespace: btNamespace,\n        field: this,\n        settings: btSettings\n      })\n\n      blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n      blockType.on('paste.configurator', () => this._pasteBlockType())\n      blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n      blockType.on('beforeLoad.configurator', () => {\n        this.$fieldLayoutContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n        this.$settingsContainer.append(\n          $('<span class=\"spinner\"/></span>')\n        )\n      })\n      blockType.on('afterLoad.configurator', () => {\n        this.$fieldLayoutContainer.children('.spinner').remove()\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(blockType)\n        const blockTypeSettings = blockType.getSettings()\n        blockTypeSettings?.refreshChildBlockTypes(this.getBlockTypes())\n        blockTypeSettings?.setChildBlocks()\n      })\n      existingItems.push(blockType)\n    }\n\n    for (const gInfo of settings.groups) {\n      const gSettings = new GroupSettings({\n        namespace: [...gNamespace, gInfo.id],\n        sortOrder: gInfo.sortOrder,\n        id: gInfo.id,\n        name: gInfo.name,\n        alwaysShowDropdown: gInfo.alwaysShowDropdown,\n        defaultAlwaysShowGroupDropdowns: settings.defaultAlwaysShowGroupDropdowns\n      })\n\n      const group = new Group({\n        namespace: gNamespace,\n        field: this,\n        settings: gSettings\n      })\n\n      group.on('beforeLoad.configurator', () => this.$settingsContainer.append(\n        $('<span class=\"spinner\"/></span>')\n      ))\n      group.on('afterLoad.configurator', () => {\n        this.$settingsContainer.children('.spinner').remove()\n        this.addItem(group)\n      })\n      existingItems.push(group)\n    }\n\n    for (const item of existingItems.sort((a, b) => a.getSortOrder() - b.getSortOrder())) {\n      this.addItem(item)\n    }\n\n    for (const blockType of this.getBlockTypes()) {\n      const btSettings = blockType.getSettings()\n\n      if (btSettings?.$container) {\n        const info = settings.blockTypes.find(i => i.handle === btSettings.getHandle())\n        btSettings.setChildBlocks(info.childBlocks)\n      }\n    }\n\n    // Make sure menu states (for pasting block types) are updated when changing tabs\n    const refreshPasteOptions = () => {\n      const noPasteData = !window.localStorage.getItem('neo:copyBlockType')\n\n      for (const blockType of this.getBlockTypes()) {\n        blockType.$actionsMenu.find('[data-action=\"paste\"]').parent().toggleClass('disabled', noPasteData)\n      }\n    }\n\n    refreshPasteOptions()\n    this.addListener(document, 'visibilitychange.configurator', refreshPasteOptions)\n\n    this.selectTab('settings')\n\n    this.addListener(this.$blockTypeButton, 'click', '@newBlockType')\n    this.addListener(this.$groupButton, 'click', '@newGroup')\n    this.addListener(this.$settingsButton, 'click', () => this.selectTab('settings'))\n    this.addListener(this.$fieldLayoutButton, 'click', () => this.selectTab('fieldLayout'))\n  },\n\n  addItem (item, index = -1) {\n    const settings = item.getSettings()\n\n    if (!document.contains(item.$container[0])) {\n      this._insertAt(item.$container, index)\n    }\n\n    if (this._itemSort.$items.filter(item.$container).length === 0) {\n      this._itemSort.addItems(item.$container)\n    }\n\n    if (settings?.$container) {\n      this.$settingsContainer.append(settings.$container)\n\n      if (item instanceof BlockType) {\n        settings.initUi()\n      }\n    }\n\n    this.$mainContainer.removeClass('hidden')\n\n    this.addListener(item.$container, 'click', '@selectItem')\n    item.on('destroy.configurator', () => this.removeItem(item, false))\n\n    if (item instanceof BlockType) {\n      this._addFieldLayout(item.getFieldLayout())\n    }\n\n    this._items.push(item)\n\n    // Only bother updating the item order if the item wasn't just being appended\n    if (index >= 0 && index < this._items.length - 1) {\n      this._updateItemOrder()\n    }\n\n    if (item instanceof BlockType) {\n      for (const blockType of this.getBlockTypes()) {\n        const btSettings = blockType.getSettings()\n        if (btSettings?.$container) {\n          btSettings.addChildBlockType(item)\n        }\n      }\n    }\n\n    this.trigger('addItem', {\n      item,\n      index\n    })\n  },\n\n  _addFieldLayout (fieldLayout) {\n    if (fieldLayout) {\n      this.$fieldLayoutContainer.append(fieldLayout.$container)\n    }\n  },\n\n  removeItem (item, showConfirm) {\n    showConfirm = (typeof showConfirm === 'boolean' ? showConfirm : false)\n\n    if (showConfirm) {\n      const message = Craft.t('neo', 'Are you sure you want to delete this {type}?', {\n        type:\n        item instanceof BlockType\n          ? 'block type'\n          : item instanceof Group\n            ? 'group'\n            : 'item'\n      })\n\n      if (window.confirm(message)) {\n        this.removeItem(item, false)\n      }\n    } else {\n      const settings = item.getSettings()\n\n      this._itemSort.removeItems(item.$container)\n\n      item.$container.remove()\n\n      if (settings?.$container) {\n        settings.$container.remove()\n      }\n\n      if (item instanceof BlockType) {\n        const fieldLayout = item.getFieldLayout()\n        if (fieldLayout) fieldLayout.$container.remove()\n      }\n\n      this.removeListener(item.$container, 'click')\n      item.off('.configurator')\n\n      this._items = this._items.filter((oldItem) => oldItem !== item)\n\n      if (this._items.length === 0) {\n        this.$mainContainer.addClass('hidden')\n      }\n\n      this.trigger('removeItem', {\n        item\n      })\n    }\n  },\n\n  getItems () {\n    return Array.from(this._items)\n  },\n\n  getItemByElement ($element) {\n    return this._items.find(item => item.$container.is($element))\n  },\n\n  getSelectedItem () {\n    return this._items.find(item => item.isSelected())\n  },\n\n  selectItem (item, focusInput) {\n    focusInput = (typeof focusInput === 'boolean' ? focusInput : true)\n\n    const settings = item ? item.getSettings() : null\n\n    for (const i of this._items) {\n      const thisIsTheItem = i === item\n      i.toggleSelect(thisIsTheItem)\n\n      if (thisIsTheItem) {\n        const itemIsGroup = !(i instanceof BlockType)\n        this.$fieldLayoutButton.toggleClass('hidden', itemIsGroup)\n\n        if (itemIsGroup) {\n          this.selectTab('settings')\n        }\n      }\n    }\n\n    Craft.ElementThumbLoader.retryAll()\n\n    if (focusInput && settings && !Garnish.isMobileBrowser()) {\n      setTimeout(() => settings.getFocusInput().focus(), 100)\n    }\n  },\n\n  getBlockTypes () {\n    return this._items.filter(item => item instanceof BlockType)\n  },\n\n  getGroups () {\n    return this._items.filter(item => item instanceof Group)\n  },\n\n  selectTab (tab) {\n    this.$settingsContainer.toggleClass('hidden', tab !== 'settings')\n    this.$fieldLayoutContainer.toggleClass('hidden', tab !== 'fieldLayout')\n\n    this.$settingsButton.toggleClass('is-selected', tab === 'settings')\n    this.$fieldLayoutButton.toggleClass('is-selected', tab === 'fieldLayout')\n  },\n\n  _getNewBlockTypeSettingsHtml (blockTypeId) {\n    return this._blockTypeSettingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewBlockTypeSettingsJs (blockTypeId) {\n    return this._blockTypeSettingsJs.replace(/__NEOBLOCKTYPE_ID__/g, blockTypeId)\n  },\n\n  _getNewFieldLayoutHtml () {\n    return this._fieldLayoutHtml.replace(\n      /&quot;uid&quot;:&quot;([a-f0-9-]+)&quot;/,\n      `&quot;uid&quot;:&quot;${uuidv4()}&quot;`\n    )\n  },\n\n  _getNewBlockTypeGroupSettingsHtml (groupId) {\n    return this._blockTypeGroupSettingsHtml.replace(/__NEOBLOCKTYPEGROUP_ID__/g, groupId)\n  },\n\n  _updateItemOrder () {\n    const items = []\n\n    this._itemSort.$items.each((index, element) => {\n      const item = this.getItemByElement(element)\n\n      if (item) {\n        items.push(item)\n\n        if (item instanceof BlockType) {\n          item.getSettings().refreshChildBlockTypes()\n        }\n      }\n    })\n\n    this._items = items\n  },\n\n  _createBlockTypeFrom (oldBlockType) {\n    const namespace = [...this._templateNs, 'items', 'blockTypes']\n    let id\n    do {\n      id = BlockTypeSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-bt=\"container.${id}\"]`).length > 0)\n\n    const selectedItem = this.getSelectedItem()\n    const selectedIndex = selectedItem ? selectedItem.getSortOrder() : -1\n\n    if (oldBlockType === null) {\n      const settings = new BlockTypeSettings({\n        childBlockTypes: this.getBlockTypes(),\n        id,\n        namespace: [...namespace, id],\n        sortOrder: this._items.length,\n        html: this._getNewBlockTypeSettingsHtml(id),\n        js: this._getNewBlockTypeSettingsJs(id)\n      })\n      const fieldLayout = new BlockTypeFieldLayout({\n        blockTypeId: id,\n        html: this._getNewFieldLayoutHtml(),\n        namespace: [...namespace, id]\n      })\n\n      this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n    } else {\n      const $spinner = $('<div class=\"nc_sidebar_list_item type-spinner\"><span class=\"spinner\"></span></div>')\n      this._insertAt($spinner, selectedIndex)\n      oldBlockType.load()\n        .then(() => {\n          const oldSettings = oldBlockType.getSettings()\n          const settingsObj = {\n            childBlocks: oldSettings.getChildBlocks(),\n            conditions: oldSettings.getConditions(),\n            // Set a timestamp on the handle so it doesn't clash with the old one\n            handle: `${oldSettings.getHandle()}_${Date.now()}`,\n            id,\n            minBlocks: oldSettings.getMinBlocks(),\n            maxBlocks: oldSettings.getMaxBlocks(),\n            minChildBlocks: oldSettings.getMinChildBlocks(),\n            maxChildBlocks: oldSettings.getMaxChildBlocks(),\n            minSiblingBlocks: oldSettings.getMinSiblingBlocks(),\n            maxSiblingBlocks: oldSettings.getMaxSiblingBlocks(),\n            name: oldSettings.getName(),\n            description: oldSettings.getDescription(),\n            iconId: oldSettings.getIconId(),\n            enabled: oldSettings.getEnabled(),\n            ignorePermissions: oldSettings.getIgnorePermissions(),\n            sortOrder: this._items.length,\n            topLevel: oldSettings.getTopLevel()\n          }\n          const settings = new BlockTypeSettings({\n            ...settingsObj,\n            childBlockTypes: this.getBlockTypes(),\n            namespace: [...namespace, id]\n          })\n          const layout = oldBlockType.getFieldLayout().getConfig()\n          const data = {\n            settings: settingsObj,\n            layout: layout.tabs.length > 0 ? layout : null\n          }\n\n          Craft.queue.push(() => new Promise((resolve, reject) => {\n            Craft.sendActionRequest('POST', 'neo/configurator/render-block-type', { data })\n              .then(response => {\n                const fieldLayout = new BlockTypeFieldLayout({\n                  blockTypeId: id,\n                  html: response.data.layoutHtml,\n                  namespace: [...namespace, id]\n                })\n                settings.createContainer({\n                  html: response.data.settingsHtml.replace(/__NEOBLOCKTYPE_ID__/g, id),\n                  js: response.data.settingsJs.replace(/__NEOBLOCKTYPE_ID__/g, id)\n                })\n\n                this.$blockTypesContainer.find('.type-spinner').remove()\n                this._initBlockType(namespace, settings, fieldLayout, selectedIndex)\n                resolve()\n              })\n              .catch(reject)\n          }))\n        })\n        .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t create new block type.')))\n    }\n  },\n\n  _initBlockType (namespace, settings, fieldLayout, index) {\n    const blockType = new BlockType({\n      namespace,\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this.addItem(blockType, index)\n    this.selectItem(blockType)\n    this.selectTab('settings')\n\n    blockType.on('copy.configurator', () => this._copyBlockType(blockType))\n    blockType.on('paste.configurator', () => this._pasteBlockType())\n    blockType.on('clone.configurator', () => this._createBlockTypeFrom(blockType))\n  },\n\n  _copyBlockType (blockType) {\n    blockType.load()\n      .then(() => {\n        const settings = blockType.getSettings()\n        const data = {\n          childBlocks: settings.getChildBlocks(),\n          conditions: settings.getConditions(),\n          description: settings.getDescription(),\n          enabled: settings.getEnabled(),\n          iconId: settings.getIconId(),\n          ignorePermissions: settings.getIgnorePermissions(),\n          handle: settings.getHandle(),\n          layout: blockType.getFieldLayout().getConfig(),\n          minBlocks: settings.getMinBlocks(),\n          maxBlocks: settings.getMaxBlocks(),\n          minChildBlocks: settings.getMinChildBlocks(),\n          maxChildBlocks: settings.getMaxChildBlocks(),\n          minSiblingBlocks: settings.getMinSiblingBlocks(),\n          maxSiblingBlocks: settings.getMaxSiblingBlocks(),\n          name: settings.getName(),\n          topLevel: settings.getTopLevel()\n        }\n\n        window.localStorage.setItem('neo:copyBlockType', JSON.stringify(data))\n        this.getBlockTypes().forEach(bt => bt.$actionsMenu.find('[data-action=\"paste\"]').parent().removeClass('disabled'))\n      })\n      .catch(() => Craft.cp.displayError(Craft.t('neo', 'Couldn’t copy block type.')))\n  },\n\n  _pasteBlockType () {\n    const encodedData = window.localStorage.getItem('neo:copyBlockType')\n\n    if (!encodedData) {\n      return\n    }\n\n    const data = JSON.parse(encodedData)\n    const blockTypeHandles = this.getBlockTypes().map(bt => bt.getSettings().getHandle())\n    const childBlocks = Array.isArray(data.childBlocks)\n      ? data.childBlocks.filter(cb => blockTypeHandles.includes(cb))\n      : (data.childBlocks ? true : [])\n    const settings = new BlockTypeSettings({\n      childBlocks,\n      childBlockTypes: this.getBlockTypes(),\n      conditions: data.conditions,\n      description: data.description,\n      iconId: data.iconId,\n      enabled: data.enabled,\n      ignorePermissions: data.ignorePermissions,\n      handle: data.handle,\n      minBlocks: data.minBlocks,\n      maxBlocks: data.maxBlocks,\n      minChildBlocks: data.minChildBlocks,\n      maxChildBlocks: data.maxChildBlocks,\n      minSiblingBlocks: data.minSiblingBlocks,\n      maxSiblingBlocks: data.maxSiblingBlocks,\n      name: data.name,\n      topLevel: data.topLevel,\n      html: ''\n    })\n\n    const fieldLayout = new BlockTypeFieldLayout({\n      html: this._getNewFieldLayoutHtml(),\n      layout: data.layout\n    })\n\n    const blockType = new BlockType({\n      field: this,\n      settings,\n      fieldLayout\n    })\n\n    this._createBlockTypeFrom(blockType)\n  },\n\n  _insertAt (element, index) {\n    const $element = $(element)\n\n    if (index >= 0 && index < this._items.length) {\n      $element.insertAt(index, this.$blockTypesContainer)\n    } else {\n      this.$blockTypesContainer.append($element)\n    }\n  },\n\n  '@newBlockType' () {\n    this._createBlockTypeFrom(null)\n  },\n\n  '@newGroup' () {\n    const namespace = [...this._templateNs, 'items', 'groups']\n    let id\n    do {\n      id = GroupSettings.getNewId()\n    } while (this.$blockTypesContainer.find(`[data-neo-g=\"container.${id}\"]`).length > 0)\n\n    const settings = new GroupSettings({\n      namespace: [...namespace, id],\n      html: this._getNewBlockTypeGroupSettingsHtml(id),\n      sortOrder: this._items.length,\n      id\n    })\n\n    const group = new Group({\n      namespace,\n      field: this,\n      settings\n    })\n\n    const selected = this.getSelectedItem()\n    const index = selected ? selected.getSortOrder() : -1\n\n    this.addItem(group, index)\n    this.selectItem(group)\n  },\n\n  '@selectItem' (e) {\n    const item = this.getItemByElement(e.currentTarget)\n\n    this.selectItem(item)\n  }\n})\n","import Configurator from './configurator/Configurator'\n\nconst context = window ?? this\nconst configurators = []\n\ncontext.Neo = {\n  Configurator,\n  configurators,\n\n  createConfigurator (settings = {}) {\n    const configurator = new Configurator(settings)\n    configurators.push(configurator)\n\n    return configurator\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","jQuery","$","insertAt","index","$parent","this","each","prepend","children","eq","after","Garnish","Craft","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","options","buf","rnds","random","_stack","enter","segments","join","arguments","length","undefined","fromFieldName","joined","getNamespace","enterByFieldName","fieldName","leave","pop","Array","from","parse","value","indexOf","split","separator","prefix","toFieldName","replace","match","_defaults","settings","extend","$container","_field","_selected","init","assign","field","_settings","load","Promise","resolve","getField","getSettings","getSortOrder","select","toggleSelect","deselect","trigger","selected","isSelected","namespace","html","layout","id","uid","blockId","blockName","_templateNs","NS","_id","_uid","_blockTypeId","blockTypeId","find","removeAttr","nameInput","name","concat","JSON","stringify","_fld","elementType","customizableTabs","customizableUi","updateChildBlocksUiElement","selector","$uiLibraryElement","$uiLibraryElements","filter","$tabUiElement","$tabContainer","toggleClass","hasClass","removeClass","_tabObserver","window","MutationObserver","observe","childList","subtree","getId","getUid","getBlockTypeId","getConfig","newConfig","tabs","tab","config","newElements","element","elements","newElement","fieldLayout","Item","_loaded","_this$getField","base","settingsObj","_fieldLayout","sidebarItem","$sidebarContainer","_generateBlockType","$neo","$nameText","$handleText","$moveButton","$actionsButton","test","String","menubtn","_actionsMenu","data","on","e","$actionsMenu","menu","addListener","stopPropagation","_updateTemplate","sortOrderNamespace","sortOrderName","errors","getErrors","hasErrors","isArray","keys","getName","getHandle","getFieldLayout","_this$getFieldLayout$","_this$getFieldLayout","getFieldLayoutConfig","layoutId","getFieldLayoutId","reject","then","response","headHtml","bodyHtml","BlockTypeFieldLayout","layoutHtml","createContainer","settingsHtml","js","settingsJs","catch","_settings$$container","text","getTopLevel","_this$_actionsMenu","$option","option","hideMenu","attr","confirm","destroy","getFocusElement","_this$$foot","$foot","remove","_refreshSetting","showSetting","animate","css","opacity","marginBottom","outerHeight","velocity","addClass","BlockTypeIconSelect","constructor","container","_this$imageContainer$","_this$imageContainer","_this$imageContainer$2","_this$imageContainer2","_this$btnRemove","_defineProperty","imageContainer","querySelector","image","imageText","menuItems","querySelectorAll","btnSet","btnRemove","input","addEventListener","_","forEach","item","_item$querySelector","_item$querySelector2","filename","textContent","url","getAttribute","set","_this$image","_this$input","_this$btnRemove2","setAttribute","classList","_this$image2","_this$input2","_this$btnRemove3","add","sortOrder","fieldLayoutId","fieldLayoutConfig","handle","description","enabled","ignorePermissions","minBlocks","maxBlocks","minSiblingBlocks","maxSiblingBlocks","minChildBlocks","maxChildBlocks","topLevel","childBlocks","childBlockTypes","Settings","_childBlockTypes","_initialised","$nameInput","$handleInput","$descriptionInput","$minBlocksInput","$maxBlocksInput","$minSiblingBlocksInput","$maxSiblingBlocksInput","$minChildBlocksInput","$maxChildBlocksInput","$iconContainer","_childBlocks","_fieldLayoutId","_fieldLayoutConfig","_errors","_settingsChildBlockTypes","_originalSettings","_iconSelector","_afterCreateContainer","setName","setHandle","setDescription","_setIconId","iconId","setEnabled","setIgnorePermissions","setMinBlocks","setMaxBlocks","setMinSiblingBlocks","setMaxSiblingBlocks","setMinChildBlocks","setMaxChildBlocks","setTopLevel","containerData","_containerData$js","_js","$iconIdContainer","$enabledInput","$enabledContainer","$ignorePermissionsInput","$ignorePermissionsContainer","$minChildBlocksContainer","$maxChildBlocksContainer","$topLevelInput","$topLevelContainer","$groupChildBlockTypesInput","$groupChildBlockTypesContainer","$childBlocksInput","$childBlocksContainer","$deleteButton","initUi","append","_childBlocksSelect","_enabledLightswitch","_ignorePermissionsLightswitch","_topLevelLightswitch","_groupChildBlockTypesLightswitch","_handleGenerator","stopListening","blockType","addChildBlockType","setChildBlocks","val","listening","setTimeout","$iconIdInput","_refreshChildBlockSettings","_generateChildBlocksCheckbox","getFocusInput","isNew","_this$_name","_name","oldName","property","oldValue","newValue","_this$_handle","_handle","oldHandle","getDescription","_description","oldDescription","getIconId","_iconId","oldIconId","getEnabled","_enabled","_setLightswitchField","getIgnorePermissions","_ignorePermissions","ignore","getMinBlocks","_minBlocks","_setBlocksConstraint","getMaxBlocks","_maxBlocks","getMinSiblingBlocks","_minSiblingBlocks","getMaxSiblingBlocks","_maxSiblingBlocks","getMinChildBlocks","_minChildBlocks","getMaxChildBlocks","_maxChildBlocks","mode","privateProp","jqueryProp","Math","max","parseInt","_this$_topLevel","_topLevel","lightswitchProp","toggle","getChildBlocks","_this$_childBlocks","$all","$options","onAllChange","includes","$existingCheckbox","$checkbox","_refreshChildBlockType","allChecked","eventNs","removeChildBlockType","splice","off","getConditions","baseInputName","replaceAll","baseConditionInputNameWithExtraSlash","baseConditionInputName","conditionInputNames","map","condition","allFormData","FormData","closest","conditionsData","conditionInputName","conditionsSubData","conditionsCurrentPath","conditionsDataPath","pathStep","getAll","refreshChildBlockTypes","childBlockType","$sidebarItem","$refreshedBlockType","position","$currentChildBlockTypeAtPos","insertBefore","appendTo","showSettings","$input","$labelText","_totalNewBlockTypes","getNewId","_generateGroup","_settings$getName","groupId","alwaysShowDropdown","defaultAlwaysShowGroupDropdowns","$sortOrderInput","_alwaysShowDropdown","_defaultAlwaysShowGroupDropdowns","$alwaysShowDropdownContainer","_refreshAlwaysShowDropdown","getAlwaysShowDropdown","_this$_alwaysShowDrop","_totalNewGroups","blockTypes","groups","blockTypeSettingsHtml","blockTypeSettingsJs","fieldLayoutHtml","groupSettingsHtml","_items","inputIdPrefix","$field","_blockTypeSettingsHtml","_blockTypeSettingsJs","_fieldLayoutHtml","_blockTypeGroupSettingsHtml","blockTypeGroupSettingsHtml","$mainContainer","$blockTypesContainer","$settingsContainer","$fieldLayoutContainer","$blockTypeButton","$groupButton","$settingsButton","$fieldLayoutButton","_itemSort","axis","onSortChange","_updateItemOrder","existingItems","btNamespace","gNamespace","btInfo","btSettings","BlockTypeSettings","BlockType","_copyBlockType","_pasteBlockType","_createBlockTypeFrom","addItem","blockTypeSettings","getBlockTypes","gInfo","gSettings","GroupSettings","group","Group","sort","b","info","refreshPasteOptions","noPasteData","localStorage","getItem","parent","document","selectTab","contains","_insertAt","$items","addItems","removeItem","_addFieldLayout","showConfirm","message","type","removeItems","removeListener","oldItem","getItems","getItemByElement","$element","is","getSelectedItem","selectItem","focusInput","thisIsTheItem","itemIsGroup","retryAll","focus","getGroups","_getNewBlockTypeSettingsHtml","_getNewBlockTypeSettingsJs","_getNewFieldLayoutHtml","uuidv4","_getNewBlockTypeGroupSettingsHtml","items","oldBlockType","selectedItem","selectedIndex","_initBlockType","$spinner","oldSettings","conditions","Date","now","_objectSpread","displayError","setItem","bt","encodedData","blockTypeHandles","cb","currentTarget","context","_window","configurators","Neo","Configurator","createConfigurator","configurator"],"sourceRoot":""}